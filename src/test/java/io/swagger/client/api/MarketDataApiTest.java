/*
 * Binance SPOT Public API
 * The swagger file of Binance Public API  API documents:   - [https://github.com/binance-exchange/binance-official-api-docs](https://github.com/binance-exchange/binance-official-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.AggTrade;
import io.swagger.client.model.Error;
import io.swagger.client.model.InlineResponse200;
import io.swagger.client.model.InlineResponse2001;
import io.swagger.client.model.InlineResponse2002;
import io.swagger.client.model.InlineResponse2003;
import io.swagger.client.model.InlineResponse2004;
import io.swagger.client.model.InlineResponse2005;
import io.swagger.client.model.InlineResponse2006;
import io.swagger.client.model.Trade;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MarketDataApi
 */
@Ignore
public class MarketDataApiTest {

    private final MarketDataApi api = new MarketDataApi();

    /**
     * Compressed/Aggregate Trades List
     *
     * Get compressed, aggregate trades. Trades that fill at the time, from the same order, with the same price will have the quantity aggregated.  Weight 1
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV3AggTradesGetTest() throws ApiException {
        String symbol = null;
        Integer fromId = null;
        Integer startTime = null;
        Integer endTime = null;
        Integer limit = null;
        List<AggTrade> response = api.apiV3AggTradesGet(symbol, fromId, startTime, endTime, limit);

        // TODO: test validations
    }
    /**
     * Current Average Price
     *
     * Current average price for a symbol.  Weight 1
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV3AvgPriceGetTest() throws ApiException {
        String symbol = null;
        InlineResponse2003 response = api.apiV3AvgPriceGet(symbol);

        // TODO: test validations
    }
    /**
     * Order Book
     *
     *  | Limit               | Weight  |  | -------------       |---------|  | 5, 10, 20, 50, 100  | 1       |  | 500                 | 5       |  | 1000                | 10      |  | 5000                | 50      | 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV3DepthGetTest() throws ApiException {
        String symbol = null;
        Integer limit = null;
        InlineResponse2002 response = api.apiV3DepthGet(symbol, limit);

        // TODO: test validations
    }
    /**
     * Exchange Information
     *
     * Current exchange trading rules and symbol information  Weight 1
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV3ExchangeInfoGetTest() throws ApiException {
        InlineResponse2001 response = api.apiV3ExchangeInfoGet();

        // TODO: test validations
    }
    /**
     * Old Trade Lookup
     *
     * Get older market trades.  &#x60;X-MBX-APIKEY&#x60; required in header  Weight 5
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV3HistoricalTradesGetTest() throws ApiException {
        String symbol = null;
        Integer limit = null;
        Integer fromId = null;
        List<Trade> response = api.apiV3HistoricalTradesGet(symbol, limit, fromId);

        // TODO: test validations
    }
    /**
     * Kline/Candlestick Data
     *
     * Kline/candlestick bars for a symbol.\\ Klines are uniquely identified by their open time.  Weight 1
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV3KlinesGetTest() throws ApiException {
        String symbol = null;
        String interval = null;
        Integer startTime = null;
        Integer endTime = null;
        Integer limit = null;
        Object response = api.apiV3KlinesGet(symbol, interval, startTime, endTime, limit);

        // TODO: test validations
    }
    /**
     * Test Connectivity
     *
     * Test connectivity to the Rest API.  Weight 1
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV3PingGetTest() throws ApiException {
        api.apiV3PingGet();

        // TODO: test validations
    }
    /**
     * 24hr Ticker Price Change Statistics
     *
     * 24 hour rolling window price change statistics. Careful when accessing this with no symbol.  Weight:\\ &#x60;1&#x60; for a single symbol;\\ &#x60;40&#x60; when the symbol parameter is omitted
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV3Ticker24hrGetTest() throws ApiException {
        String symbol = null;
        InlineResponse2004 response = api.apiV3Ticker24hrGet(symbol);

        // TODO: test validations
    }
    /**
     * Symbol Order Book Ticker
     *
     * Best price/qty on the order book for a symbol or symbols.  Weight:\\ 1 for a single symbol;\\ 40 when the symbol parameter is omitted
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV3TickerBookTickerGetTest() throws ApiException {
        String symbol = null;
        InlineResponse2006 response = api.apiV3TickerBookTickerGet(symbol);

        // TODO: test validations
    }
    /**
     * Symbol Price Ticker
     *
     * Latest price for a symbol or symbols.  Weight:\\ &#x60;1&#x60; for a single symbol;\\ &#x60;2&#x60; when the symbol parameter is omitted
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV3TickerPriceGetTest() throws ApiException {
        String symbol = null;
        InlineResponse2005 response = api.apiV3TickerPriceGet(symbol);

        // TODO: test validations
    }
    /**
     * Check Server Time
     *
     * Test connectivity to the Rest API and get the current server time.  Weight 1
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV3TimeGetTest() throws ApiException {
        InlineResponse200 response = api.apiV3TimeGet();

        // TODO: test validations
    }
    /**
     * Recent Trades List
     *
     * Get recent trades (up to last 500).  Weight 1
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV3TradesGetTest() throws ApiException {
        String symbol = null;
        Integer limit = null;
        List<Trade> response = api.apiV3TradesGet(symbol, limit);

        // TODO: test validations
    }
}
