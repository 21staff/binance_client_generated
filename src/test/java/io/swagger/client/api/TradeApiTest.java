/*
 * Binance SPOT Public API
 * The swagger file of Binance Public API  API documents:   - [https://github.com/binance-exchange/binance-official-api-docs](https://github.com/binance-exchange/binance-official-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.Account;
import io.swagger.client.model.Error;
import io.swagger.client.model.InlineResponse2007;
import io.swagger.client.model.InlineResponse2008;
import io.swagger.client.model.MyTrade;
import io.swagger.client.model.OCOOrder;
import io.swagger.client.model.Order;
import io.swagger.client.model.OrderDetails;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TradeApi
 */
@Ignore
public class TradeApiTest {

    private final TradeApi api = new TradeApi();

    /**
     * Account Information (USER_DATA)
     *
     * Get current account information.  Weight: 5
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV3AccountGetTest() throws ApiException {
        Integer timestamp = null;
        String signature = null;
        Integer recvWindow = null;
        Account response = api.apiV3AccountGet(timestamp, signature, recvWindow);

        // TODO: test validations
    }
    /**
     * Query all OCO (USER_DATA)
     *
     * Retrieves all OCO based on provided optional parameters  Weight: 10
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV3AllOrderListGetTest() throws ApiException {
        Integer timestamp = null;
        String signature = null;
        Integer fromId = null;
        Integer startTime = null;
        Integer endTime = null;
        Integer limit = null;
        Integer recvWindow = null;
        List<OCOOrder> response = api.apiV3AllOrderListGet(timestamp, signature, fromId, startTime, endTime, limit, recvWindow);

        // TODO: test validations
    }
    /**
     * All Orders (USER_DATA)
     *
     * Get all account orders; active, canceled, or filled..  - If orderId is set, it will get orders &gt;&#x3D; that orderId. Otherwise most recent orders are returned. - For some historical orders cummulativeQuoteQty will be &lt; 0, meaning the data is not available at this time.  Weight: 5
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV3AllOrdersGetTest() throws ApiException {
        String symbol = null;
        Integer timestamp = null;
        String signature = null;
        Integer orderId = null;
        Integer startTime = null;
        Integer endTime = null;
        Integer limit = null;
        Integer recvWindow = null;
        List<OrderDetails> response = api.apiV3AllOrdersGet(symbol, timestamp, signature, orderId, startTime, endTime, limit, recvWindow);

        // TODO: test validations
    }
    /**
     * Account Trade List (USER_DATA)
     *
     * Get trades for a specific account and symbol.  If fromId is set, it will get id &gt;&#x3D; that fromId. Otherwise most recent orders are returned.  Weight: 5
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV3MyTradesGetTest() throws ApiException {
        String symbol = null;
        Integer timestamp = null;
        String signature = null;
        Integer startTime = null;
        Integer endTime = null;
        Integer fromId = null;
        Integer limit = null;
        Integer recvWindow = null;
        MyTrade response = api.apiV3MyTradesGet(symbol, timestamp, signature, startTime, endTime, fromId, limit, recvWindow);

        // TODO: test validations
    }
    /**
     * Query Open OCO (USER_DATA)
     *
     * Weight: 2
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV3OpenOrderListGetTest() throws ApiException {
        Integer timestamp = null;
        String signature = null;
        Integer recvWindow = null;
        List<OCOOrder> response = api.apiV3OpenOrderListGet(timestamp, signature, recvWindow);

        // TODO: test validations
    }
    /**
     * Cancel all Open Orders on a Symbol (TRADE)
     *
     * Cancels all active orders on a symbol.\\ This includes OCO orders.  Weight: 1 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV3OpenOrdersDeleteTest() throws ApiException {
        String symbol = null;
        Integer timestamp = null;
        String signature = null;
        Integer recvWindow = null;
        List<Order> response = api.apiV3OpenOrdersDelete(symbol, timestamp, signature, recvWindow);

        // TODO: test validations
    }
    /**
     * Current Open Orders (USER_DATA)
     *
     * Get all open orders on a symbol. Careful when accessing this with no symbol.\\  Weight:\\ &#x60;1&#x60; for a single symbol;\\ &#x60;40&#x60; when the symbol parameter is omitted
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV3OpenOrdersGetTest() throws ApiException {
        Integer timestamp = null;
        String signature = null;
        String symbol = null;
        Integer recvWindow = null;
        List<OrderDetails> response = api.apiV3OpenOrdersGet(timestamp, signature, symbol, recvWindow);

        // TODO: test validations
    }
    /**
     * Cancel Order (TRADE)
     *
     * Cancel an active order.  Either &#x60;orderId&#x60; or &#x60;origClientOrderId&#x60; must be sent.  Weight: 1 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV3OrderDeleteTest() throws ApiException {
        String symbol = null;
        Integer timestamp = null;
        String signature = null;
        Integer orderId = null;
        String origClientOrderId = null;
        String newClientOrderId = null;
        Integer recvWindow = null;
        Order response = api.apiV3OrderDelete(symbol, timestamp, signature, orderId, origClientOrderId, newClientOrderId, recvWindow);

        // TODO: test validations
    }
    /**
     * Query Order (USER_DATA)
     *
     * Check an order&#x27;s status.  - Either &#x60;orderId&#x60; or &#x60;origClientOrderId&#x60; must be sent. - For some historical orders &#x60;cummulativeQuoteQty&#x60; will be &lt; 0, meaning the data is not available at this time.  Weight: 1 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV3OrderGetTest() throws ApiException {
        String symbol = null;
        Integer timestamp = null;
        String signature = null;
        Integer orderId = null;
        String origClientOrderId = null;
        Integer recvWindow = null;
        OrderDetails response = api.apiV3OrderGet(symbol, timestamp, signature, orderId, origClientOrderId, recvWindow);

        // TODO: test validations
    }
    /**
     * Cancel OCO (TRADE)
     *
     * Cancel an entire Order List  Canceling an individual leg will cancel the entire OCO  Weight: 1 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV3OrderListDeleteTest() throws ApiException {
        String symbol = null;
        Integer timestamp = null;
        String signature = null;
        Integer orderListId = null;
        String listClientOrderId = null;
        String newClientOrderId = null;
        Integer recvWindow = null;
        Object response = api.apiV3OrderListDelete(symbol, timestamp, signature, orderListId, listClientOrderId, newClientOrderId, recvWindow);

        // TODO: test validations
    }
    /**
     * Query OCO (USER_DATA)
     *
     * Retrieves a specific OCO based on provided optional parameters  Weight: 1
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV3OrderListGetTest() throws ApiException {
        Integer timestamp = null;
        String signature = null;
        Integer orderListId = null;
        String origClientOrderId = null;
        Integer recvWindow = null;
        OCOOrder response = api.apiV3OrderListGet(timestamp, signature, orderListId, origClientOrderId, recvWindow);

        // TODO: test validations
    }
    /**
     * New OCO (TRADE)
     *
     * Send in a new OCO  - Price Restrictions:   - SELL: Limit Price &gt; Last Price &gt; Stop Price   - BUY: Limit Price &lt; Last Price &lt; Stop Price - Quantity Restrictions:     - Both legs must have the same quantity     - ICEBERG quantities however do not have to be the same  Weight: 1
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV3OrderOcoPostTest() throws ApiException {
        String symbol = null;
        String side = null;
        Float quantity = null;
        Float price = null;
        Float stopPrice = null;
        Integer timestamp = null;
        String signature = null;
        String listClientOrderId = null;
        Float limitClientOrderId = null;
        Float limitIcebergQty = null;
        String stopClientOrderId = null;
        Float stopLimitPrice = null;
        Float stopIcebergQty = null;
        String stopLimitTimeInForce = null;
        String newOrderRespType = null;
        Integer recvWindow = null;
        InlineResponse2008 response = api.apiV3OrderOcoPost(symbol, side, quantity, price, stopPrice, timestamp, signature, listClientOrderId, limitClientOrderId, limitIcebergQty, stopClientOrderId, stopLimitPrice, stopIcebergQty, stopLimitTimeInForce, newOrderRespType, recvWindow);

        // TODO: test validations
    }
    /**
     * New Order (TRADE)
     *
     * Send in a new order.   - &#x60;LIMIT_MAKER&#x60; are &#x60;LIMIT&#x60; orders that will be rejected if they would immediately match and trade as a taker. - &#x60;STOP_LOSS&#x60; and &#x60;TAKE_PROFIT&#x60; will execute a &#x60;MARKET&#x60; order when the &#x60;stopPrice&#x60; is reached. - Any &#x60;LIMIT&#x60; or &#x60;LIMIT_MAKER&#x60; type order can be made an iceberg order by sending an &#x60;icebergQty&#x60;. - Any order with an &#x60;icebergQty&#x60; MUST have &#x60;timeInForce&#x60; set to &#x60;GTC&#x60;. - &#x60;MARKET&#x60; orders using &#x60;quantity&#x60; specifies how much a user wants to buy or sell based on the market price. - &#x60;MARKET&#x60; orders using &#x60;quoteOrderQty&#x60; specifies the amount the user wants to spend (when buying) or receive (when selling) of the quote asset; the correct quantity will be determined based on the market liquidity and &#x60;quoteOrderQty&#x60;. - &#x60;MARKET&#x60; orders using &#x60;quoteOrderQty&#x60; will not break &#x60;LOT_SIZE&#x60; filter rules; the order will execute a quantity that will have the notional value as close as possible to &#x60;quoteOrderQty&#x60;. - same &#x60;newClientOrderId&#x60; can be accepted only when the previous one is filled, otherwise the order will be rejected.  Trigger order price rules against market price for both &#x60;MARKET&#x60; and &#x60;LIMIT&#x60; versions:  - Price above market price: STOP_LOSS BUY, TAKE_PROFIT SELL - Price below market price: STOP_LOSS SELL, TAKE_PROFIT BUY   Weight: 1 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV3OrderPostTest() throws ApiException {
        String symbol = null;
        String side = null;
        String type = null;
        Integer timestamp = null;
        String signature = null;
        String timeInForce = null;
        Float quantity = null;
        Float quoteOrderQty = null;
        Float price = null;
        String newClientOrderId = null;
        Float stopPrice = null;
        Float icebergQty = null;
        String newOrderRespType = null;
        Integer recvWindow = null;
        InlineResponse2007 response = api.apiV3OrderPost(symbol, side, type, timestamp, signature, timeInForce, quantity, quoteOrderQty, price, newClientOrderId, stopPrice, icebergQty, newOrderRespType, recvWindow);

        // TODO: test validations
    }
    /**
     * Test New Order (TRADE)
     *
     * Test new order creation and signature/recvWindow long.  Creates and validates a new order but does not send it into the matching engine.  Weight: 1
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV3OrderTestPostTest() throws ApiException {
        String symbol = null;
        String side = null;
        String type = null;
        Integer timestamp = null;
        String signature = null;
        String timeInForce = null;
        Float quantity = null;
        Float quoteOrderQty = null;
        Float price = null;
        String newClientOrderId = null;
        Float stopPrice = null;
        Float icebergQty = null;
        String newOrderRespType = null;
        Integer recvWindow = null;
        api.apiV3OrderTestPost(symbol, side, type, timestamp, signature, timeInForce, quantity, quoteOrderQty, price, newClientOrderId, stopPrice, icebergQty, newOrderRespType, recvWindow);

        // TODO: test validations
    }
}
