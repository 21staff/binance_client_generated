/*
 * Binance SPOT Public API
 * The swagger file of Binance Public API  API documents:   - [https://github.com/binance-exchange/binance-official-api-docs](https://github.com/binance-exchange/binance-official-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.Error;
import io.swagger.client.model.InlineResponse20018;
import io.swagger.client.model.InlineResponse20019;
import io.swagger.client.model.InlineResponse20020;
import io.swagger.client.model.InlineResponse20021;
import io.swagger.client.model.InlineResponse20022;
import io.swagger.client.model.InlineResponse20023;
import io.swagger.client.model.InlineResponse20024;
import io.swagger.client.model.InlineResponse20025;
import io.swagger.client.model.InlineResponse20026;
import io.swagger.client.model.InlineResponse20027;
import io.swagger.client.model.InlineResponse20028;
import io.swagger.client.model.InlineResponse20029;
import io.swagger.client.model.InlineResponse20030;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WalletApi
 */
@Ignore
public class WalletApiTest {

    private final WalletApi api = new WalletApi();

    /**
     * Disable Fast Withdraw Switch (USER_DATA)
     *
     * This request will disable fastwithdraw switch under your account. You need to enable \&quot;trade\&quot; option for the api key which requests this endpoint.  Weight: 1
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sapiV1AccountDisableFastWithdrawSwitchPostTest() throws ApiException {
        Integer timestamp = null;
        String signature = null;
        Integer recvWindow = null;
        api.sapiV1AccountDisableFastWithdrawSwitchPost(timestamp, signature, recvWindow);

        // TODO: test validations
    }
    /**
     * Enable Fast Withdraw Switch (USER_DATA)
     *
     *  - This request will enable fastwithdraw switch under your account. You need to enable \&quot;trade\&quot; option for the api key which requests this endpoint. - When Fast Withdraw Switch is on, transferring funds to a Binance account will be done instantly. There is no on-chain transaction, no transaction ID and no withdrawal fee.  Weight: 1
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sapiV1AccountEnableFastWithdrawSwitchPostTest() throws ApiException {
        Integer timestamp = null;
        String signature = null;
        Integer recvWindow = null;
        api.sapiV1AccountEnableFastWithdrawSwitchPost(timestamp, signature, recvWindow);

        // TODO: test validations
    }
    /**
     * Daily Account Snapshot (USER_DATA)
     *
     *  Weight: 1
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sapiV1AccountSnapshotGetTest() throws ApiException {
        String type = null;
        Integer limit = null;
        Integer timestamp = null;
        String signature = null;
        Integer startTime = null;
        Integer endTime = null;
        Integer recvWindow = null;
        InlineResponse20019 response = api.sapiV1AccountSnapshotGet(type, limit, timestamp, signature, startTime, endTime, recvWindow);

        // TODO: test validations
    }
    /**
     * Dust Transfer
     *
     * Query asset Dividend Record   Weight: 1
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sapiV1AssetAssetDividendGetTest() throws ApiException {
        String limit = null;
        Integer timestamp = null;
        String signature = null;
        String asset = null;
        Integer startTime = null;
        Integer endTime = null;
        Integer recvWindow = null;
        InlineResponse20028 response = api.sapiV1AssetAssetDividendGet(limit, timestamp, signature, asset, startTime, endTime, recvWindow);

        // TODO: test validations
    }
    /**
     * Dust Transfer
     *
     * Convert dust assets to BNB.  Weight: 1
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sapiV1AssetDustPostTest() throws ApiException {
        String asset = null;
        Integer timestamp = null;
        String signature = null;
        Integer recvWindow = null;
        InlineResponse20027 response = api.sapiV1AssetDustPost(asset, timestamp, signature, recvWindow);

        // TODO: test validations
    }
    /**
     * All Coins&#x27; Information (USER_DATA)
     *
     * Get information of coins (available for deposit and withdraw) for user.  Weight: 1
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sapiV1CapitalConfigGetallGetTest() throws ApiException {
        Integer timestamp = null;
        String signature = null;
        Integer recvWindow = null;
        InlineResponse20018 response = api.sapiV1CapitalConfigGetallGet(timestamp, signature, recvWindow);

        // TODO: test validations
    }
    /**
     * Withdraw History (supporting network) (USER_DATA)
     *
     * Fetch withdraw history.  - network may not be in the response for old withdraw. - Please notice the default startTime and endTime to make sure that time interval is within 0-90 days. - If both startTime and endTime are sent, time between startTime and endTime must be less than 90 days  Weight: 1
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sapiV1CapitalDepositAddressGetTest() throws ApiException {
        String coin = null;
        Integer timestamp = null;
        String signature = null;
        String network = null;
        Integer recvWindow = null;
        InlineResponse20023 response = api.sapiV1CapitalDepositAddressGet(coin, timestamp, signature, network, recvWindow);

        // TODO: test validations
    }
    /**
     * Deposit History（supporting network） (USER_DATA)
     *
     * Fetch deposit history.  - Please notice the default startTime and endTime to make sure that time interval is within 0-90 days. - If both startTime and endTime are sent, time between startTime and endTime must be less than 90 days.  Weight: 1
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sapiV1CapitalDepositHisrecGetTest() throws ApiException {
        Integer timestamp = null;
        String signature = null;
        String coin = null;
        Integer status = null;
        Integer startTime = null;
        Integer endTime = null;
        Integer offset = null;
        Integer limit = null;
        Integer recvWindow = null;
        List<InlineResponse20021> response = api.sapiV1CapitalDepositHisrecGet(timestamp, signature, coin, status, startTime, endTime, offset, limit, recvWindow);

        // TODO: test validations
    }
    /**
     * Withdraw
     *
     * Submit a withdraw request.  - If network not send, return with default network of the coin. - You can get network and isDefault in networkList of a coin in the response of &#x60;Get /sapi/v1/capital/config/getall (HMAC SHA256)&#x60;.  Weight: 1
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sapiV1CapitalWithdrawApplyPostTest() throws ApiException {
        String coin = null;
        String address = null;
        Float amount = null;
        Integer timestamp = null;
        String signature = null;
        String withdrawOrderId = null;
        String network = null;
        String addressTag = null;
        Boolean transactionFeeFlag = null;
        String name = null;
        Integer recvWindow = null;
        InlineResponse20020 response = api.sapiV1CapitalWithdrawApplyPost(coin, address, amount, timestamp, signature, withdrawOrderId, network, addressTag, transactionFeeFlag, name, recvWindow);

        // TODO: test validations
    }
    /**
     * Withdraw History (supporting network) (USER_DATA)
     *
     * Fetch withdraw history.  - network may not be in the response for old withdraw. - Please notice the default startTime and endTime to make sure that time interval is within 0-90 days. - If both startTime and endTime are sent, time between startTime and endTime must be less than 90 days  Weight: 1
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sapiV1CapitalWithdrawHistoryGetTest() throws ApiException {
        Integer timestamp = null;
        String signature = null;
        String coin = null;
        Integer status = null;
        Integer startTime = null;
        Integer endTime = null;
        Integer offset = null;
        Integer limit = null;
        Integer recvWindow = null;
        List<InlineResponse20022> response = api.sapiV1CapitalWithdrawHistoryGet(timestamp, signature, coin, status, startTime, endTime, offset, limit, recvWindow);

        // TODO: test validations
    }
    /**
     * Account Status (USER_DATA)
     *
     * Fetch account status detail.  Weight: 1
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void wapiV3AccountStatusHtmlGetTest() throws ApiException {
        Integer timestamp = null;
        String signature = null;
        Integer recvWindow = null;
        InlineResponse20024 response = api.wapiV3AccountStatusHtmlGet(timestamp, signature, recvWindow);

        // TODO: test validations
    }
    /**
     * Account API Trading Status (USER_DATA)
     *
     * Fetch account api trading status detail.  Weight: 1
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void wapiV3ApiTradingStatusHtmlGetTest() throws ApiException {
        Integer timestamp = null;
        String signature = null;
        Integer recvWindow = null;
        InlineResponse20025 response = api.wapiV3ApiTradingStatusHtmlGet(timestamp, signature, recvWindow);

        // TODO: test validations
    }
    /**
     * Asset Detail (USER_DATA)
     *
     * Fetch details of assets supported on Binance.  Please get network and other deposit or withdraw details from &#x60;GET /sapi/v1/capital/config/getall&#x60;.  Weight: 1
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void wapiV3AssetDetailHtmlGetTest() throws ApiException {
        Integer timestamp = null;
        String signature = null;
        Integer recvWindow = null;
        InlineResponse20029 response = api.wapiV3AssetDetailHtmlGet(timestamp, signature, recvWindow);

        // TODO: test validations
    }
    /**
     * System Status (System)
     *
     * Weight: 1
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void wapiV3SystemStatusHtmlGetTest() throws ApiException {
        Object response = api.wapiV3SystemStatusHtmlGet();

        // TODO: test validations
    }
    /**
     * Trade Fee (USER_DATA)
     *
     * Fetch trade fee, values in percentage.  Weight: 1
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void wapiV3TradeFeeHtmlGetTest() throws ApiException {
        Integer timestamp = null;
        String signature = null;
        String symbol = null;
        Integer recvWindow = null;
        InlineResponse20030 response = api.wapiV3TradeFeeHtmlGet(timestamp, signature, symbol, recvWindow);

        // TODO: test validations
    }
    /**
     * DustLog (USER_DATA)
     *
     * Fetch small amounts of assets exchanged BNB records.  Weight: 1
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void wapiV3UserAssetDribbletLogHtmlGetTest() throws ApiException {
        Integer timestamp = null;
        String signature = null;
        Integer recvWindow = null;
        InlineResponse20026 response = api.wapiV3UserAssetDribbletLogHtmlGet(timestamp, signature, recvWindow);

        // TODO: test validations
    }
}
