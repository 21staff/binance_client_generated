/*
 * Binance SPOT Public API
 * The swagger file of Binance Public API  API documents:   - [https://github.com/binance-exchange/binance-official-api-docs](https://github.com/binance-exchange/binance-official-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import io.swagger.client.model.Error;
import io.swagger.client.model.InlineResponse20010;
import io.swagger.client.model.InlineResponse20011;
import io.swagger.client.model.InlineResponse20012;
import io.swagger.client.model.InlineResponse20013;
import io.swagger.client.model.InlineResponse20014;
import io.swagger.client.model.InlineResponse20015;
import io.swagger.client.model.InlineResponse20016;
import io.swagger.client.model.InlineResponse20017;
import io.swagger.client.model.InlineResponse2009;
import io.swagger.client.model.MarginOrder;
import io.swagger.client.model.MarginOrderDetail;
import io.swagger.client.model.MarginTrade;
import io.swagger.client.model.Transaction;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MarginApi {
    private ApiClient apiClient;

    public MarginApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MarginApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for sapiV1MarginAccountGet
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sapiV1MarginAccountGetCall(Integer timestamp, String signature, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/sapi/v1/margin/account";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (recvWindow != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recvWindow", recvWindow));
        if (timestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timestamp", timestamp));
        if (signature != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signature", signature));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sapiV1MarginAccountGetValidateBeforeCall(Integer timestamp, String signature, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling sapiV1MarginAccountGet(Async)");
        }
        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling sapiV1MarginAccountGet(Async)");
        }
        
        com.squareup.okhttp.Call call = sapiV1MarginAccountGetCall(timestamp, signature, recvWindow, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Query Margin Account Details (USER_DATA)
     * Weight: 1
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return InlineResponse20017
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20017 sapiV1MarginAccountGet(Integer timestamp, String signature, Integer recvWindow) throws ApiException {
        ApiResponse<InlineResponse20017> resp = sapiV1MarginAccountGetWithHttpInfo(timestamp, signature, recvWindow);
        return resp.getData();
    }

    /**
     * Query Margin Account Details (USER_DATA)
     * Weight: 1
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return ApiResponse&lt;InlineResponse20017&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20017> sapiV1MarginAccountGetWithHttpInfo(Integer timestamp, String signature, Integer recvWindow) throws ApiException {
        com.squareup.okhttp.Call call = sapiV1MarginAccountGetValidateBeforeCall(timestamp, signature, recvWindow, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20017>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query Margin Account Details (USER_DATA) (asynchronously)
     * Weight: 1
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sapiV1MarginAccountGetAsync(Integer timestamp, String signature, Integer recvWindow, final ApiCallback<InlineResponse20017> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sapiV1MarginAccountGetValidateBeforeCall(timestamp, signature, recvWindow, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20017>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sapiV1MarginAllAssetsGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sapiV1MarginAllAssetsGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/sapi/v1/margin/allAssets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sapiV1MarginAllAssetsGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = sapiV1MarginAllAssetsGetCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get All Margin Assets (MARKET_DATA)
     * Weight: 1
     * @return List&lt;InlineResponse20012&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<InlineResponse20012> sapiV1MarginAllAssetsGet() throws ApiException {
        ApiResponse<List<InlineResponse20012>> resp = sapiV1MarginAllAssetsGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get All Margin Assets (MARKET_DATA)
     * Weight: 1
     * @return ApiResponse&lt;List&lt;InlineResponse20012&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<InlineResponse20012>> sapiV1MarginAllAssetsGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = sapiV1MarginAllAssetsGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<InlineResponse20012>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get All Margin Assets (MARKET_DATA) (asynchronously)
     * Weight: 1
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sapiV1MarginAllAssetsGetAsync(final ApiCallback<List<InlineResponse20012>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sapiV1MarginAllAssetsGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<InlineResponse20012>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sapiV1MarginAllOrdersGet
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param orderId order id (optional)
     * @param startTime Timestamp in ms (optional)
     * @param endTime Timestamp in ms (optional)
     * @param limit Default 500; max 1000. (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sapiV1MarginAllOrdersGetCall(String symbol, Integer timestamp, String signature, Integer orderId, Integer startTime, Integer endTime, Integer limit, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/sapi/v1/margin/allOrders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (symbol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("symbol", symbol));
        if (orderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderId", orderId));
        if (startTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startTime", startTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endTime", endTime));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (recvWindow != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recvWindow", recvWindow));
        if (timestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timestamp", timestamp));
        if (signature != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signature", signature));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sapiV1MarginAllOrdersGetValidateBeforeCall(String symbol, Integer timestamp, String signature, Integer orderId, Integer startTime, Integer endTime, Integer limit, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling sapiV1MarginAllOrdersGet(Async)");
        }
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling sapiV1MarginAllOrdersGet(Async)");
        }
        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling sapiV1MarginAllOrdersGet(Async)");
        }
        
        com.squareup.okhttp.Call call = sapiV1MarginAllOrdersGetCall(symbol, timestamp, signature, orderId, startTime, endTime, limit, recvWindow, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Query Margin Account&#x27;s All Order (USER_DATA)
     * - If &#x60;orderId&#x60; is set, it will get orders &gt;&#x3D; that orderId. Otherwise most recent orders are returned. - For some historical orders &#x60;cummulativeQuoteQty&#x60; will be &lt; 0, meaning the data is not available at this time.  Weight: 1
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param orderId order id (optional)
     * @param startTime Timestamp in ms (optional)
     * @param endTime Timestamp in ms (optional)
     * @param limit Default 500; max 1000. (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return List&lt;MarginOrderDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<MarginOrderDetail> sapiV1MarginAllOrdersGet(String symbol, Integer timestamp, String signature, Integer orderId, Integer startTime, Integer endTime, Integer limit, Integer recvWindow) throws ApiException {
        ApiResponse<List<MarginOrderDetail>> resp = sapiV1MarginAllOrdersGetWithHttpInfo(symbol, timestamp, signature, orderId, startTime, endTime, limit, recvWindow);
        return resp.getData();
    }

    /**
     * Query Margin Account&#x27;s All Order (USER_DATA)
     * - If &#x60;orderId&#x60; is set, it will get orders &gt;&#x3D; that orderId. Otherwise most recent orders are returned. - For some historical orders &#x60;cummulativeQuoteQty&#x60; will be &lt; 0, meaning the data is not available at this time.  Weight: 1
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param orderId order id (optional)
     * @param startTime Timestamp in ms (optional)
     * @param endTime Timestamp in ms (optional)
     * @param limit Default 500; max 1000. (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return ApiResponse&lt;List&lt;MarginOrderDetail&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<MarginOrderDetail>> sapiV1MarginAllOrdersGetWithHttpInfo(String symbol, Integer timestamp, String signature, Integer orderId, Integer startTime, Integer endTime, Integer limit, Integer recvWindow) throws ApiException {
        com.squareup.okhttp.Call call = sapiV1MarginAllOrdersGetValidateBeforeCall(symbol, timestamp, signature, orderId, startTime, endTime, limit, recvWindow, null, null);
        Type localVarReturnType = new TypeToken<List<MarginOrderDetail>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query Margin Account&#x27;s All Order (USER_DATA) (asynchronously)
     * - If &#x60;orderId&#x60; is set, it will get orders &gt;&#x3D; that orderId. Otherwise most recent orders are returned. - For some historical orders &#x60;cummulativeQuoteQty&#x60; will be &lt; 0, meaning the data is not available at this time.  Weight: 1
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param orderId order id (optional)
     * @param startTime Timestamp in ms (optional)
     * @param endTime Timestamp in ms (optional)
     * @param limit Default 500; max 1000. (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sapiV1MarginAllOrdersGetAsync(String symbol, Integer timestamp, String signature, Integer orderId, Integer startTime, Integer endTime, Integer limit, Integer recvWindow, final ApiCallback<List<MarginOrderDetail>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sapiV1MarginAllOrdersGetValidateBeforeCall(symbol, timestamp, signature, orderId, startTime, endTime, limit, recvWindow, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<MarginOrderDetail>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sapiV1MarginAllPairsGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sapiV1MarginAllPairsGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/sapi/v1/margin/allPairs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sapiV1MarginAllPairsGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = sapiV1MarginAllPairsGetCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get All Margin Pairs (MARKET_DATA)
     * Weight: 1
     * @return List&lt;InlineResponse20013&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<InlineResponse20013> sapiV1MarginAllPairsGet() throws ApiException {
        ApiResponse<List<InlineResponse20013>> resp = sapiV1MarginAllPairsGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get All Margin Pairs (MARKET_DATA)
     * Weight: 1
     * @return ApiResponse&lt;List&lt;InlineResponse20013&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<InlineResponse20013>> sapiV1MarginAllPairsGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = sapiV1MarginAllPairsGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<InlineResponse20013>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get All Margin Pairs (MARKET_DATA) (asynchronously)
     * Weight: 1
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sapiV1MarginAllPairsGetAsync(final ApiCallback<List<InlineResponse20013>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sapiV1MarginAllPairsGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<InlineResponse20013>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sapiV1MarginAssetGet
     * @param asset The asset being transferred, e.g., BTC (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sapiV1MarginAssetGetCall(String asset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/sapi/v1/margin/asset";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (asset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("asset", asset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sapiV1MarginAssetGetValidateBeforeCall(String asset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'asset' is set
        if (asset == null) {
            throw new ApiException("Missing the required parameter 'asset' when calling sapiV1MarginAssetGet(Async)");
        }
        
        com.squareup.okhttp.Call call = sapiV1MarginAssetGetCall(asset, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Query Margin Asset (MARKET_DATA)
     * Weight: 1
     * @param asset The asset being transferred, e.g., BTC (required)
     * @return InlineResponse20010
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20010 sapiV1MarginAssetGet(String asset) throws ApiException {
        ApiResponse<InlineResponse20010> resp = sapiV1MarginAssetGetWithHttpInfo(asset);
        return resp.getData();
    }

    /**
     * Query Margin Asset (MARKET_DATA)
     * Weight: 1
     * @param asset The asset being transferred, e.g., BTC (required)
     * @return ApiResponse&lt;InlineResponse20010&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20010> sapiV1MarginAssetGetWithHttpInfo(String asset) throws ApiException {
        com.squareup.okhttp.Call call = sapiV1MarginAssetGetValidateBeforeCall(asset, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20010>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query Margin Asset (MARKET_DATA) (asynchronously)
     * Weight: 1
     * @param asset The asset being transferred, e.g., BTC (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sapiV1MarginAssetGetAsync(String asset, final ApiCallback<InlineResponse20010> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sapiV1MarginAssetGetValidateBeforeCall(asset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20010>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sapiV1MarginForceLiquidationRecGet
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param startTime Timestamp in ms (optional)
     * @param endTime Timestamp in ms (optional)
     * @param current Currently querying page. Start from 1. Default:1 (optional)
     * @param size Default:10 Max:100 (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sapiV1MarginForceLiquidationRecGetCall(Integer timestamp, String signature, Integer startTime, Integer endTime, BigDecimal current, BigDecimal size, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/sapi/v1/margin/forceLiquidationRec";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startTime", startTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endTime", endTime));
        if (current != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("current", current));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (recvWindow != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recvWindow", recvWindow));
        if (timestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timestamp", timestamp));
        if (signature != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signature", signature));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sapiV1MarginForceLiquidationRecGetValidateBeforeCall(Integer timestamp, String signature, Integer startTime, Integer endTime, BigDecimal current, BigDecimal size, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling sapiV1MarginForceLiquidationRecGet(Async)");
        }
        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling sapiV1MarginForceLiquidationRecGet(Async)");
        }
        
        com.squareup.okhttp.Call call = sapiV1MarginForceLiquidationRecGetCall(timestamp, signature, startTime, endTime, current, size, recvWindow, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Force Liquidation Record (USER_DATA)
     * Weight: 1
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param startTime Timestamp in ms (optional)
     * @param endTime Timestamp in ms (optional)
     * @param current Currently querying page. Start from 1. Default:1 (optional)
     * @param size Default:10 Max:100 (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object sapiV1MarginForceLiquidationRecGet(Integer timestamp, String signature, Integer startTime, Integer endTime, BigDecimal current, BigDecimal size, Integer recvWindow) throws ApiException {
        ApiResponse<Object> resp = sapiV1MarginForceLiquidationRecGetWithHttpInfo(timestamp, signature, startTime, endTime, current, size, recvWindow);
        return resp.getData();
    }

    /**
     * Get Force Liquidation Record (USER_DATA)
     * Weight: 1
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param startTime Timestamp in ms (optional)
     * @param endTime Timestamp in ms (optional)
     * @param current Currently querying page. Start from 1. Default:1 (optional)
     * @param size Default:10 Max:100 (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> sapiV1MarginForceLiquidationRecGetWithHttpInfo(Integer timestamp, String signature, Integer startTime, Integer endTime, BigDecimal current, BigDecimal size, Integer recvWindow) throws ApiException {
        com.squareup.okhttp.Call call = sapiV1MarginForceLiquidationRecGetValidateBeforeCall(timestamp, signature, startTime, endTime, current, size, recvWindow, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Force Liquidation Record (USER_DATA) (asynchronously)
     * Weight: 1
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param startTime Timestamp in ms (optional)
     * @param endTime Timestamp in ms (optional)
     * @param current Currently querying page. Start from 1. Default:1 (optional)
     * @param size Default:10 Max:100 (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sapiV1MarginForceLiquidationRecGetAsync(Integer timestamp, String signature, Integer startTime, Integer endTime, BigDecimal current, BigDecimal size, Integer recvWindow, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sapiV1MarginForceLiquidationRecGetValidateBeforeCall(timestamp, signature, startTime, endTime, current, size, recvWindow, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sapiV1MarginInterestHistoryGet
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param asset The asset being transferred, e.g., BTC (optional)
     * @param startTime Timestamp in ms (optional)
     * @param endTime Timestamp in ms (optional)
     * @param current Currently querying page. Start from 1. Default:1 (optional)
     * @param size Default:10 Max:100 (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sapiV1MarginInterestHistoryGetCall(Integer timestamp, String signature, String asset, Integer startTime, Integer endTime, BigDecimal current, BigDecimal size, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/sapi/v1/margin/interestHistory";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (asset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("asset", asset));
        if (startTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startTime", startTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endTime", endTime));
        if (current != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("current", current));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (recvWindow != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recvWindow", recvWindow));
        if (timestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timestamp", timestamp));
        if (signature != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signature", signature));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sapiV1MarginInterestHistoryGetValidateBeforeCall(Integer timestamp, String signature, String asset, Integer startTime, Integer endTime, BigDecimal current, BigDecimal size, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling sapiV1MarginInterestHistoryGet(Async)");
        }
        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling sapiV1MarginInterestHistoryGet(Async)");
        }
        
        com.squareup.okhttp.Call call = sapiV1MarginInterestHistoryGetCall(timestamp, signature, asset, startTime, endTime, current, size, recvWindow, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Query Interest History (MARKET_DATA)
     * Weight: 1
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param asset The asset being transferred, e.g., BTC (optional)
     * @param startTime Timestamp in ms (optional)
     * @param endTime Timestamp in ms (optional)
     * @param current Currently querying page. Start from 1. Default:1 (optional)
     * @param size Default:10 Max:100 (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return InlineResponse20016
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20016 sapiV1MarginInterestHistoryGet(Integer timestamp, String signature, String asset, Integer startTime, Integer endTime, BigDecimal current, BigDecimal size, Integer recvWindow) throws ApiException {
        ApiResponse<InlineResponse20016> resp = sapiV1MarginInterestHistoryGetWithHttpInfo(timestamp, signature, asset, startTime, endTime, current, size, recvWindow);
        return resp.getData();
    }

    /**
     * Query Interest History (MARKET_DATA)
     * Weight: 1
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param asset The asset being transferred, e.g., BTC (optional)
     * @param startTime Timestamp in ms (optional)
     * @param endTime Timestamp in ms (optional)
     * @param current Currently querying page. Start from 1. Default:1 (optional)
     * @param size Default:10 Max:100 (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return ApiResponse&lt;InlineResponse20016&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20016> sapiV1MarginInterestHistoryGetWithHttpInfo(Integer timestamp, String signature, String asset, Integer startTime, Integer endTime, BigDecimal current, BigDecimal size, Integer recvWindow) throws ApiException {
        com.squareup.okhttp.Call call = sapiV1MarginInterestHistoryGetValidateBeforeCall(timestamp, signature, asset, startTime, endTime, current, size, recvWindow, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20016>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query Interest History (MARKET_DATA) (asynchronously)
     * Weight: 1
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param asset The asset being transferred, e.g., BTC (optional)
     * @param startTime Timestamp in ms (optional)
     * @param endTime Timestamp in ms (optional)
     * @param current Currently querying page. Start from 1. Default:1 (optional)
     * @param size Default:10 Max:100 (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sapiV1MarginInterestHistoryGetAsync(Integer timestamp, String signature, String asset, Integer startTime, Integer endTime, BigDecimal current, BigDecimal size, Integer recvWindow, final ApiCallback<InlineResponse20016> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sapiV1MarginInterestHistoryGetValidateBeforeCall(timestamp, signature, asset, startTime, endTime, current, size, recvWindow, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20016>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sapiV1MarginLoanGet
     * @param asset The asset being transferred, e.g., BTC (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param txId the tranId in  &#x60;POST /sapi/v1/margin/loan&#x60; (optional)
     * @param startTime Timestamp in ms (optional)
     * @param endTime Timestamp in ms (optional)
     * @param current Currently querying page. Start from 1. Default:1 (optional)
     * @param size Default:10 Max:100 (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sapiV1MarginLoanGetCall(String asset, Integer timestamp, String signature, Integer txId, Integer startTime, Integer endTime, BigDecimal current, BigDecimal size, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/sapi/v1/margin/loan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (asset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("asset", asset));
        if (txId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("txId", txId));
        if (startTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startTime", startTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endTime", endTime));
        if (current != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("current", current));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (recvWindow != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recvWindow", recvWindow));
        if (timestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timestamp", timestamp));
        if (signature != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signature", signature));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sapiV1MarginLoanGetValidateBeforeCall(String asset, Integer timestamp, String signature, Integer txId, Integer startTime, Integer endTime, BigDecimal current, BigDecimal size, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'asset' is set
        if (asset == null) {
            throw new ApiException("Missing the required parameter 'asset' when calling sapiV1MarginLoanGet(Async)");
        }
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling sapiV1MarginLoanGet(Async)");
        }
        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling sapiV1MarginLoanGet(Async)");
        }
        
        com.squareup.okhttp.Call call = sapiV1MarginLoanGetCall(asset, timestamp, signature, txId, startTime, endTime, current, size, recvWindow, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Query Load Record (USER_DATA)
     * &#x60;txId&#x60; or &#x60;startTime&#x60; must be sent. txId takes precedence.  Weight: 1
     * @param asset The asset being transferred, e.g., BTC (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param txId the tranId in  &#x60;POST /sapi/v1/margin/loan&#x60; (optional)
     * @param startTime Timestamp in ms (optional)
     * @param endTime Timestamp in ms (optional)
     * @param current Currently querying page. Start from 1. Default:1 (optional)
     * @param size Default:10 Max:100 (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object sapiV1MarginLoanGet(String asset, Integer timestamp, String signature, Integer txId, Integer startTime, Integer endTime, BigDecimal current, BigDecimal size, Integer recvWindow) throws ApiException {
        ApiResponse<Object> resp = sapiV1MarginLoanGetWithHttpInfo(asset, timestamp, signature, txId, startTime, endTime, current, size, recvWindow);
        return resp.getData();
    }

    /**
     * Query Load Record (USER_DATA)
     * &#x60;txId&#x60; or &#x60;startTime&#x60; must be sent. txId takes precedence.  Weight: 1
     * @param asset The asset being transferred, e.g., BTC (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param txId the tranId in  &#x60;POST /sapi/v1/margin/loan&#x60; (optional)
     * @param startTime Timestamp in ms (optional)
     * @param endTime Timestamp in ms (optional)
     * @param current Currently querying page. Start from 1. Default:1 (optional)
     * @param size Default:10 Max:100 (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> sapiV1MarginLoanGetWithHttpInfo(String asset, Integer timestamp, String signature, Integer txId, Integer startTime, Integer endTime, BigDecimal current, BigDecimal size, Integer recvWindow) throws ApiException {
        com.squareup.okhttp.Call call = sapiV1MarginLoanGetValidateBeforeCall(asset, timestamp, signature, txId, startTime, endTime, current, size, recvWindow, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query Load Record (USER_DATA) (asynchronously)
     * &#x60;txId&#x60; or &#x60;startTime&#x60; must be sent. txId takes precedence.  Weight: 1
     * @param asset The asset being transferred, e.g., BTC (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param txId the tranId in  &#x60;POST /sapi/v1/margin/loan&#x60; (optional)
     * @param startTime Timestamp in ms (optional)
     * @param endTime Timestamp in ms (optional)
     * @param current Currently querying page. Start from 1. Default:1 (optional)
     * @param size Default:10 Max:100 (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sapiV1MarginLoanGetAsync(String asset, Integer timestamp, String signature, Integer txId, Integer startTime, Integer endTime, BigDecimal current, BigDecimal size, Integer recvWindow, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sapiV1MarginLoanGetValidateBeforeCall(asset, timestamp, signature, txId, startTime, endTime, current, size, recvWindow, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sapiV1MarginLoanPost
     * @param asset The asset being transferred, e.g., BTC (required)
     * @param amount  (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sapiV1MarginLoanPostCall(String asset, Float amount, Integer timestamp, String signature, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/sapi/v1/margin/loan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (asset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("asset", asset));
        if (amount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("amount", amount));
        if (recvWindow != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recvWindow", recvWindow));
        if (timestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timestamp", timestamp));
        if (signature != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signature", signature));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sapiV1MarginLoanPostValidateBeforeCall(String asset, Float amount, Integer timestamp, String signature, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'asset' is set
        if (asset == null) {
            throw new ApiException("Missing the required parameter 'asset' when calling sapiV1MarginLoanPost(Async)");
        }
        // verify the required parameter 'amount' is set
        if (amount == null) {
            throw new ApiException("Missing the required parameter 'amount' when calling sapiV1MarginLoanPost(Async)");
        }
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling sapiV1MarginLoanPost(Async)");
        }
        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling sapiV1MarginLoanPost(Async)");
        }
        
        com.squareup.okhttp.Call call = sapiV1MarginLoanPostCall(asset, amount, timestamp, signature, recvWindow, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Margin Account Borrow (MARGIN)
     * Apply for a loan.  Weight: 1
     * @param asset The asset being transferred, e.g., BTC (required)
     * @param amount  (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return Transaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Transaction sapiV1MarginLoanPost(String asset, Float amount, Integer timestamp, String signature, Integer recvWindow) throws ApiException {
        ApiResponse<Transaction> resp = sapiV1MarginLoanPostWithHttpInfo(asset, amount, timestamp, signature, recvWindow);
        return resp.getData();
    }

    /**
     * Margin Account Borrow (MARGIN)
     * Apply for a loan.  Weight: 1
     * @param asset The asset being transferred, e.g., BTC (required)
     * @param amount  (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return ApiResponse&lt;Transaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Transaction> sapiV1MarginLoanPostWithHttpInfo(String asset, Float amount, Integer timestamp, String signature, Integer recvWindow) throws ApiException {
        com.squareup.okhttp.Call call = sapiV1MarginLoanPostValidateBeforeCall(asset, amount, timestamp, signature, recvWindow, null, null);
        Type localVarReturnType = new TypeToken<Transaction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Margin Account Borrow (MARGIN) (asynchronously)
     * Apply for a loan.  Weight: 1
     * @param asset The asset being transferred, e.g., BTC (required)
     * @param amount  (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sapiV1MarginLoanPostAsync(String asset, Float amount, Integer timestamp, String signature, Integer recvWindow, final ApiCallback<Transaction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sapiV1MarginLoanPostValidateBeforeCall(asset, amount, timestamp, signature, recvWindow, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Transaction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sapiV1MarginMaxBorrowableGet
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sapiV1MarginMaxBorrowableGetCall(String symbol, Integer timestamp, String signature, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/sapi/v1/margin/maxBorrowable";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (symbol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("symbol", symbol));
        if (recvWindow != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recvWindow", recvWindow));
        if (timestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timestamp", timestamp));
        if (signature != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signature", signature));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sapiV1MarginMaxBorrowableGetValidateBeforeCall(String symbol, Integer timestamp, String signature, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling sapiV1MarginMaxBorrowableGet(Async)");
        }
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling sapiV1MarginMaxBorrowableGet(Async)");
        }
        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling sapiV1MarginMaxBorrowableGet(Async)");
        }
        
        com.squareup.okhttp.Call call = sapiV1MarginMaxBorrowableGetCall(symbol, timestamp, signature, recvWindow, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Query Max Borrow (USER_DATA)
     * Weight: 5
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object sapiV1MarginMaxBorrowableGet(String symbol, Integer timestamp, String signature, Integer recvWindow) throws ApiException {
        ApiResponse<Object> resp = sapiV1MarginMaxBorrowableGetWithHttpInfo(symbol, timestamp, signature, recvWindow);
        return resp.getData();
    }

    /**
     * Query Max Borrow (USER_DATA)
     * Weight: 5
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> sapiV1MarginMaxBorrowableGetWithHttpInfo(String symbol, Integer timestamp, String signature, Integer recvWindow) throws ApiException {
        com.squareup.okhttp.Call call = sapiV1MarginMaxBorrowableGetValidateBeforeCall(symbol, timestamp, signature, recvWindow, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query Max Borrow (USER_DATA) (asynchronously)
     * Weight: 5
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sapiV1MarginMaxBorrowableGetAsync(String symbol, Integer timestamp, String signature, Integer recvWindow, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sapiV1MarginMaxBorrowableGetValidateBeforeCall(symbol, timestamp, signature, recvWindow, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sapiV1MarginMaxTransferableGet
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sapiV1MarginMaxTransferableGetCall(String symbol, Integer timestamp, String signature, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/sapi/v1/margin/maxTransferable";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (symbol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("symbol", symbol));
        if (recvWindow != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recvWindow", recvWindow));
        if (timestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timestamp", timestamp));
        if (signature != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signature", signature));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sapiV1MarginMaxTransferableGetValidateBeforeCall(String symbol, Integer timestamp, String signature, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling sapiV1MarginMaxTransferableGet(Async)");
        }
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling sapiV1MarginMaxTransferableGet(Async)");
        }
        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling sapiV1MarginMaxTransferableGet(Async)");
        }
        
        com.squareup.okhttp.Call call = sapiV1MarginMaxTransferableGetCall(symbol, timestamp, signature, recvWindow, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Query Max Transfer-Out Amount (USER_DATA)
     * Weight: 5
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object sapiV1MarginMaxTransferableGet(String symbol, Integer timestamp, String signature, Integer recvWindow) throws ApiException {
        ApiResponse<Object> resp = sapiV1MarginMaxTransferableGetWithHttpInfo(symbol, timestamp, signature, recvWindow);
        return resp.getData();
    }

    /**
     * Query Max Transfer-Out Amount (USER_DATA)
     * Weight: 5
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> sapiV1MarginMaxTransferableGetWithHttpInfo(String symbol, Integer timestamp, String signature, Integer recvWindow) throws ApiException {
        com.squareup.okhttp.Call call = sapiV1MarginMaxTransferableGetValidateBeforeCall(symbol, timestamp, signature, recvWindow, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query Max Transfer-Out Amount (USER_DATA) (asynchronously)
     * Weight: 5
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sapiV1MarginMaxTransferableGetAsync(String symbol, Integer timestamp, String signature, Integer recvWindow, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sapiV1MarginMaxTransferableGetValidateBeforeCall(symbol, timestamp, signature, recvWindow, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sapiV1MarginMyTradesGet
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param startTime Timestamp in ms (optional)
     * @param endTime Timestamp in ms (optional)
     * @param fromId Trade id to fetch from. Default gets most recent trades. (optional)
     * @param limit Default 500; max 1000. (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sapiV1MarginMyTradesGetCall(String symbol, Integer timestamp, String signature, Integer startTime, Integer endTime, Integer fromId, Integer limit, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/sapi/v1/margin/myTrades";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (symbol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("symbol", symbol));
        if (startTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startTime", startTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endTime", endTime));
        if (fromId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fromId", fromId));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (recvWindow != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recvWindow", recvWindow));
        if (timestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timestamp", timestamp));
        if (signature != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signature", signature));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sapiV1MarginMyTradesGetValidateBeforeCall(String symbol, Integer timestamp, String signature, Integer startTime, Integer endTime, Integer fromId, Integer limit, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling sapiV1MarginMyTradesGet(Async)");
        }
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling sapiV1MarginMyTradesGet(Async)");
        }
        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling sapiV1MarginMyTradesGet(Async)");
        }
        
        com.squareup.okhttp.Call call = sapiV1MarginMyTradesGetCall(symbol, timestamp, signature, startTime, endTime, fromId, limit, recvWindow, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * If fromId is set, it will get orders &gt;&#x3D; that fromId. Otherwise most recent orders are returned.
     * Weight: 1
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param startTime Timestamp in ms (optional)
     * @param endTime Timestamp in ms (optional)
     * @param fromId Trade id to fetch from. Default gets most recent trades. (optional)
     * @param limit Default 500; max 1000. (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return List&lt;MarginTrade&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<MarginTrade> sapiV1MarginMyTradesGet(String symbol, Integer timestamp, String signature, Integer startTime, Integer endTime, Integer fromId, Integer limit, Integer recvWindow) throws ApiException {
        ApiResponse<List<MarginTrade>> resp = sapiV1MarginMyTradesGetWithHttpInfo(symbol, timestamp, signature, startTime, endTime, fromId, limit, recvWindow);
        return resp.getData();
    }

    /**
     * If fromId is set, it will get orders &gt;&#x3D; that fromId. Otherwise most recent orders are returned.
     * Weight: 1
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param startTime Timestamp in ms (optional)
     * @param endTime Timestamp in ms (optional)
     * @param fromId Trade id to fetch from. Default gets most recent trades. (optional)
     * @param limit Default 500; max 1000. (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return ApiResponse&lt;List&lt;MarginTrade&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<MarginTrade>> sapiV1MarginMyTradesGetWithHttpInfo(String symbol, Integer timestamp, String signature, Integer startTime, Integer endTime, Integer fromId, Integer limit, Integer recvWindow) throws ApiException {
        com.squareup.okhttp.Call call = sapiV1MarginMyTradesGetValidateBeforeCall(symbol, timestamp, signature, startTime, endTime, fromId, limit, recvWindow, null, null);
        Type localVarReturnType = new TypeToken<List<MarginTrade>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * If fromId is set, it will get orders &gt;&#x3D; that fromId. Otherwise most recent orders are returned. (asynchronously)
     * Weight: 1
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param startTime Timestamp in ms (optional)
     * @param endTime Timestamp in ms (optional)
     * @param fromId Trade id to fetch from. Default gets most recent trades. (optional)
     * @param limit Default 500; max 1000. (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sapiV1MarginMyTradesGetAsync(String symbol, Integer timestamp, String signature, Integer startTime, Integer endTime, Integer fromId, Integer limit, Integer recvWindow, final ApiCallback<List<MarginTrade>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sapiV1MarginMyTradesGetValidateBeforeCall(symbol, timestamp, signature, startTime, endTime, fromId, limit, recvWindow, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<MarginTrade>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sapiV1MarginOpenOrdersGet
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param symbol trading symbol, e.g. BNBUSDT (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sapiV1MarginOpenOrdersGetCall(Integer timestamp, String signature, String symbol, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/sapi/v1/margin/openOrders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (symbol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("symbol", symbol));
        if (recvWindow != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recvWindow", recvWindow));
        if (timestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timestamp", timestamp));
        if (signature != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signature", signature));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sapiV1MarginOpenOrdersGetValidateBeforeCall(Integer timestamp, String signature, String symbol, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling sapiV1MarginOpenOrdersGet(Async)");
        }
        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling sapiV1MarginOpenOrdersGet(Async)");
        }
        
        com.squareup.okhttp.Call call = sapiV1MarginOpenOrdersGetCall(timestamp, signature, symbol, recvWindow, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Query Margin Account&#x27;s Open Order (USER_DATA)
     * - If the symbol is not sent, orders for all symbols will be returned in an array. - When all symbols are returned, the number of requests counted against the rate limiter is equal to the number of symbols currently trading on the exchange  Weight: 1
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param symbol trading symbol, e.g. BNBUSDT (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return List&lt;MarginOrderDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<MarginOrderDetail> sapiV1MarginOpenOrdersGet(Integer timestamp, String signature, String symbol, Integer recvWindow) throws ApiException {
        ApiResponse<List<MarginOrderDetail>> resp = sapiV1MarginOpenOrdersGetWithHttpInfo(timestamp, signature, symbol, recvWindow);
        return resp.getData();
    }

    /**
     * Query Margin Account&#x27;s Open Order (USER_DATA)
     * - If the symbol is not sent, orders for all symbols will be returned in an array. - When all symbols are returned, the number of requests counted against the rate limiter is equal to the number of symbols currently trading on the exchange  Weight: 1
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param symbol trading symbol, e.g. BNBUSDT (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return ApiResponse&lt;List&lt;MarginOrderDetail&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<MarginOrderDetail>> sapiV1MarginOpenOrdersGetWithHttpInfo(Integer timestamp, String signature, String symbol, Integer recvWindow) throws ApiException {
        com.squareup.okhttp.Call call = sapiV1MarginOpenOrdersGetValidateBeforeCall(timestamp, signature, symbol, recvWindow, null, null);
        Type localVarReturnType = new TypeToken<List<MarginOrderDetail>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query Margin Account&#x27;s Open Order (USER_DATA) (asynchronously)
     * - If the symbol is not sent, orders for all symbols will be returned in an array. - When all symbols are returned, the number of requests counted against the rate limiter is equal to the number of symbols currently trading on the exchange  Weight: 1
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param symbol trading symbol, e.g. BNBUSDT (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sapiV1MarginOpenOrdersGetAsync(Integer timestamp, String signature, String symbol, Integer recvWindow, final ApiCallback<List<MarginOrderDetail>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sapiV1MarginOpenOrdersGetValidateBeforeCall(timestamp, signature, symbol, recvWindow, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<MarginOrderDetail>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sapiV1MarginOrderDelete
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param orderId order id (optional)
     * @param origClientOrderId order id from client (optional)
     * @param newClientOrderId Used to uniquely identify this cancel. Automatically generated by default (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sapiV1MarginOrderDeleteCall(String symbol, Integer timestamp, String signature, Integer orderId, String origClientOrderId, String newClientOrderId, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/sapi/v1/margin/order";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (symbol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("symbol", symbol));
        if (orderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderId", orderId));
        if (origClientOrderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("origClientOrderId", origClientOrderId));
        if (newClientOrderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("newClientOrderId", newClientOrderId));
        if (recvWindow != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recvWindow", recvWindow));
        if (timestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timestamp", timestamp));
        if (signature != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signature", signature));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sapiV1MarginOrderDeleteValidateBeforeCall(String symbol, Integer timestamp, String signature, Integer orderId, String origClientOrderId, String newClientOrderId, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling sapiV1MarginOrderDelete(Async)");
        }
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling sapiV1MarginOrderDelete(Async)");
        }
        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling sapiV1MarginOrderDelete(Async)");
        }
        
        com.squareup.okhttp.Call call = sapiV1MarginOrderDeleteCall(symbol, timestamp, signature, orderId, origClientOrderId, newClientOrderId, recvWindow, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Margin Account Cancel Order (TRADE)
     * Cancel an active order for margin account.  Either orderId or origClientOrderId must be sent.  Weight: 1 
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param orderId order id (optional)
     * @param origClientOrderId order id from client (optional)
     * @param newClientOrderId Used to uniquely identify this cancel. Automatically generated by default (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return MarginOrder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MarginOrder sapiV1MarginOrderDelete(String symbol, Integer timestamp, String signature, Integer orderId, String origClientOrderId, String newClientOrderId, Integer recvWindow) throws ApiException {
        ApiResponse<MarginOrder> resp = sapiV1MarginOrderDeleteWithHttpInfo(symbol, timestamp, signature, orderId, origClientOrderId, newClientOrderId, recvWindow);
        return resp.getData();
    }

    /**
     * Margin Account Cancel Order (TRADE)
     * Cancel an active order for margin account.  Either orderId or origClientOrderId must be sent.  Weight: 1 
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param orderId order id (optional)
     * @param origClientOrderId order id from client (optional)
     * @param newClientOrderId Used to uniquely identify this cancel. Automatically generated by default (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return ApiResponse&lt;MarginOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MarginOrder> sapiV1MarginOrderDeleteWithHttpInfo(String symbol, Integer timestamp, String signature, Integer orderId, String origClientOrderId, String newClientOrderId, Integer recvWindow) throws ApiException {
        com.squareup.okhttp.Call call = sapiV1MarginOrderDeleteValidateBeforeCall(symbol, timestamp, signature, orderId, origClientOrderId, newClientOrderId, recvWindow, null, null);
        Type localVarReturnType = new TypeToken<MarginOrder>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Margin Account Cancel Order (TRADE) (asynchronously)
     * Cancel an active order for margin account.  Either orderId or origClientOrderId must be sent.  Weight: 1 
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param orderId order id (optional)
     * @param origClientOrderId order id from client (optional)
     * @param newClientOrderId Used to uniquely identify this cancel. Automatically generated by default (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sapiV1MarginOrderDeleteAsync(String symbol, Integer timestamp, String signature, Integer orderId, String origClientOrderId, String newClientOrderId, Integer recvWindow, final ApiCallback<MarginOrder> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sapiV1MarginOrderDeleteValidateBeforeCall(symbol, timestamp, signature, orderId, origClientOrderId, newClientOrderId, recvWindow, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MarginOrder>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sapiV1MarginOrderGet
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param orderId order id (optional)
     * @param origClientOrderId order id from client (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sapiV1MarginOrderGetCall(String symbol, Integer timestamp, String signature, Integer orderId, String origClientOrderId, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/sapi/v1/margin/order";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (symbol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("symbol", symbol));
        if (orderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderId", orderId));
        if (origClientOrderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("origClientOrderId", origClientOrderId));
        if (recvWindow != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recvWindow", recvWindow));
        if (timestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timestamp", timestamp));
        if (signature != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signature", signature));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sapiV1MarginOrderGetValidateBeforeCall(String symbol, Integer timestamp, String signature, Integer orderId, String origClientOrderId, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling sapiV1MarginOrderGet(Async)");
        }
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling sapiV1MarginOrderGet(Async)");
        }
        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling sapiV1MarginOrderGet(Async)");
        }
        
        com.squareup.okhttp.Call call = sapiV1MarginOrderGetCall(symbol, timestamp, signature, orderId, origClientOrderId, recvWindow, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Query Margin Account&#x27;s Order (MARKET_DATA)
     * - Either &#x60;orderId&#x60; or &#x60;origClientOrderId&#x60; must be sent. - For some historical orders &#x60;cummulativeQuoteQty&#x60; will be &lt; 0, meaning the data is not available at this time.  Weight: 1
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param orderId order id (optional)
     * @param origClientOrderId order id from client (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return MarginOrderDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MarginOrderDetail sapiV1MarginOrderGet(String symbol, Integer timestamp, String signature, Integer orderId, String origClientOrderId, Integer recvWindow) throws ApiException {
        ApiResponse<MarginOrderDetail> resp = sapiV1MarginOrderGetWithHttpInfo(symbol, timestamp, signature, orderId, origClientOrderId, recvWindow);
        return resp.getData();
    }

    /**
     * Query Margin Account&#x27;s Order (MARKET_DATA)
     * - Either &#x60;orderId&#x60; or &#x60;origClientOrderId&#x60; must be sent. - For some historical orders &#x60;cummulativeQuoteQty&#x60; will be &lt; 0, meaning the data is not available at this time.  Weight: 1
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param orderId order id (optional)
     * @param origClientOrderId order id from client (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return ApiResponse&lt;MarginOrderDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MarginOrderDetail> sapiV1MarginOrderGetWithHttpInfo(String symbol, Integer timestamp, String signature, Integer orderId, String origClientOrderId, Integer recvWindow) throws ApiException {
        com.squareup.okhttp.Call call = sapiV1MarginOrderGetValidateBeforeCall(symbol, timestamp, signature, orderId, origClientOrderId, recvWindow, null, null);
        Type localVarReturnType = new TypeToken<MarginOrderDetail>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query Margin Account&#x27;s Order (MARKET_DATA) (asynchronously)
     * - Either &#x60;orderId&#x60; or &#x60;origClientOrderId&#x60; must be sent. - For some historical orders &#x60;cummulativeQuoteQty&#x60; will be &lt; 0, meaning the data is not available at this time.  Weight: 1
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param orderId order id (optional)
     * @param origClientOrderId order id from client (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sapiV1MarginOrderGetAsync(String symbol, Integer timestamp, String signature, Integer orderId, String origClientOrderId, Integer recvWindow, final ApiCallback<MarginOrderDetail> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sapiV1MarginOrderGetValidateBeforeCall(symbol, timestamp, signature, orderId, origClientOrderId, recvWindow, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MarginOrderDetail>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sapiV1MarginOrderPost
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param side SELL or BUY (required)
     * @param type the order type (required)
     * @param quantity order quantity (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param price order price (optional)
     * @param stopPrice Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders. (optional)
     * @param newClientOrderId Used to uniquely identify this cancel. Automatically generated by default (optional)
     * @param icebergQty Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order. (optional)
     * @param newOrderRespType Set the response JSON. ACK, RESULT, or FULL; MARKET and LIMIT order types default to FULL, all other orders default to ACK. (optional)
     * @param sideEffectType default NO_SIDE_EFFECT (optional)
     * @param timeInForce order time in force (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sapiV1MarginOrderPostCall(String symbol, String side, String type, Float quantity, Integer timestamp, String signature, Float price, Float stopPrice, String newClientOrderId, Float icebergQty, String newOrderRespType, String sideEffectType, String timeInForce, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/sapi/v1/margin/order";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (symbol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("symbol", symbol));
        if (side != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("side", side));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (quantity != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("quantity", quantity));
        if (price != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("price", price));
        if (stopPrice != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("stopPrice", stopPrice));
        if (newClientOrderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("newClientOrderId", newClientOrderId));
        if (icebergQty != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("icebergQty", icebergQty));
        if (newOrderRespType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("newOrderRespType", newOrderRespType));
        if (sideEffectType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sideEffectType", sideEffectType));
        if (timeInForce != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timeInForce", timeInForce));
        if (recvWindow != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recvWindow", recvWindow));
        if (timestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timestamp", timestamp));
        if (signature != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signature", signature));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sapiV1MarginOrderPostValidateBeforeCall(String symbol, String side, String type, Float quantity, Integer timestamp, String signature, Float price, Float stopPrice, String newClientOrderId, Float icebergQty, String newOrderRespType, String sideEffectType, String timeInForce, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling sapiV1MarginOrderPost(Async)");
        }
        // verify the required parameter 'side' is set
        if (side == null) {
            throw new ApiException("Missing the required parameter 'side' when calling sapiV1MarginOrderPost(Async)");
        }
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling sapiV1MarginOrderPost(Async)");
        }
        // verify the required parameter 'quantity' is set
        if (quantity == null) {
            throw new ApiException("Missing the required parameter 'quantity' when calling sapiV1MarginOrderPost(Async)");
        }
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling sapiV1MarginOrderPost(Async)");
        }
        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling sapiV1MarginOrderPost(Async)");
        }
        
        com.squareup.okhttp.Call call = sapiV1MarginOrderPostCall(symbol, side, type, quantity, timestamp, signature, price, stopPrice, newClientOrderId, icebergQty, newOrderRespType, sideEffectType, timeInForce, recvWindow, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Margin Account New Order (TRADE)
     * Post a new order for margin account.  Weight: 1
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param side SELL or BUY (required)
     * @param type the order type (required)
     * @param quantity order quantity (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param price order price (optional)
     * @param stopPrice Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders. (optional)
     * @param newClientOrderId Used to uniquely identify this cancel. Automatically generated by default (optional)
     * @param icebergQty Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order. (optional)
     * @param newOrderRespType Set the response JSON. ACK, RESULT, or FULL; MARKET and LIMIT order types default to FULL, all other orders default to ACK. (optional)
     * @param sideEffectType default NO_SIDE_EFFECT (optional)
     * @param timeInForce order time in force (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return InlineResponse20015
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20015 sapiV1MarginOrderPost(String symbol, String side, String type, Float quantity, Integer timestamp, String signature, Float price, Float stopPrice, String newClientOrderId, Float icebergQty, String newOrderRespType, String sideEffectType, String timeInForce, Integer recvWindow) throws ApiException {
        ApiResponse<InlineResponse20015> resp = sapiV1MarginOrderPostWithHttpInfo(symbol, side, type, quantity, timestamp, signature, price, stopPrice, newClientOrderId, icebergQty, newOrderRespType, sideEffectType, timeInForce, recvWindow);
        return resp.getData();
    }

    /**
     * Margin Account New Order (TRADE)
     * Post a new order for margin account.  Weight: 1
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param side SELL or BUY (required)
     * @param type the order type (required)
     * @param quantity order quantity (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param price order price (optional)
     * @param stopPrice Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders. (optional)
     * @param newClientOrderId Used to uniquely identify this cancel. Automatically generated by default (optional)
     * @param icebergQty Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order. (optional)
     * @param newOrderRespType Set the response JSON. ACK, RESULT, or FULL; MARKET and LIMIT order types default to FULL, all other orders default to ACK. (optional)
     * @param sideEffectType default NO_SIDE_EFFECT (optional)
     * @param timeInForce order time in force (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return ApiResponse&lt;InlineResponse20015&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20015> sapiV1MarginOrderPostWithHttpInfo(String symbol, String side, String type, Float quantity, Integer timestamp, String signature, Float price, Float stopPrice, String newClientOrderId, Float icebergQty, String newOrderRespType, String sideEffectType, String timeInForce, Integer recvWindow) throws ApiException {
        com.squareup.okhttp.Call call = sapiV1MarginOrderPostValidateBeforeCall(symbol, side, type, quantity, timestamp, signature, price, stopPrice, newClientOrderId, icebergQty, newOrderRespType, sideEffectType, timeInForce, recvWindow, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20015>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Margin Account New Order (TRADE) (asynchronously)
     * Post a new order for margin account.  Weight: 1
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param side SELL or BUY (required)
     * @param type the order type (required)
     * @param quantity order quantity (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param price order price (optional)
     * @param stopPrice Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders. (optional)
     * @param newClientOrderId Used to uniquely identify this cancel. Automatically generated by default (optional)
     * @param icebergQty Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order. (optional)
     * @param newOrderRespType Set the response JSON. ACK, RESULT, or FULL; MARKET and LIMIT order types default to FULL, all other orders default to ACK. (optional)
     * @param sideEffectType default NO_SIDE_EFFECT (optional)
     * @param timeInForce order time in force (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sapiV1MarginOrderPostAsync(String symbol, String side, String type, Float quantity, Integer timestamp, String signature, Float price, Float stopPrice, String newClientOrderId, Float icebergQty, String newOrderRespType, String sideEffectType, String timeInForce, Integer recvWindow, final ApiCallback<InlineResponse20015> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sapiV1MarginOrderPostValidateBeforeCall(symbol, side, type, quantity, timestamp, signature, price, stopPrice, newClientOrderId, icebergQty, newOrderRespType, sideEffectType, timeInForce, recvWindow, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20015>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sapiV1MarginPairGet
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sapiV1MarginPairGetCall(String symbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/sapi/v1/margin/pair";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (symbol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("symbol", symbol));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sapiV1MarginPairGetValidateBeforeCall(String symbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling sapiV1MarginPairGet(Async)");
        }
        
        com.squareup.okhttp.Call call = sapiV1MarginPairGetCall(symbol, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Query Margin Pair (MARKET_DATA)
     * Weight: 1
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @return InlineResponse20011
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20011 sapiV1MarginPairGet(String symbol) throws ApiException {
        ApiResponse<InlineResponse20011> resp = sapiV1MarginPairGetWithHttpInfo(symbol);
        return resp.getData();
    }

    /**
     * Query Margin Pair (MARKET_DATA)
     * Weight: 1
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @return ApiResponse&lt;InlineResponse20011&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20011> sapiV1MarginPairGetWithHttpInfo(String symbol) throws ApiException {
        com.squareup.okhttp.Call call = sapiV1MarginPairGetValidateBeforeCall(symbol, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20011>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query Margin Pair (MARKET_DATA) (asynchronously)
     * Weight: 1
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sapiV1MarginPairGetAsync(String symbol, final ApiCallback<InlineResponse20011> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sapiV1MarginPairGetValidateBeforeCall(symbol, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20011>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sapiV1MarginPriceIndexGet
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sapiV1MarginPriceIndexGetCall(String symbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/sapi/v1/margin/priceIndex";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (symbol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("symbol", symbol));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sapiV1MarginPriceIndexGetValidateBeforeCall(String symbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling sapiV1MarginPriceIndexGet(Async)");
        }
        
        com.squareup.okhttp.Call call = sapiV1MarginPriceIndexGetCall(symbol, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Query Margin PriceIndex (MARKET_DATA)
     * Weight: 1
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @return InlineResponse20014
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20014 sapiV1MarginPriceIndexGet(String symbol) throws ApiException {
        ApiResponse<InlineResponse20014> resp = sapiV1MarginPriceIndexGetWithHttpInfo(symbol);
        return resp.getData();
    }

    /**
     * Query Margin PriceIndex (MARKET_DATA)
     * Weight: 1
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @return ApiResponse&lt;InlineResponse20014&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20014> sapiV1MarginPriceIndexGetWithHttpInfo(String symbol) throws ApiException {
        com.squareup.okhttp.Call call = sapiV1MarginPriceIndexGetValidateBeforeCall(symbol, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20014>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query Margin PriceIndex (MARKET_DATA) (asynchronously)
     * Weight: 1
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sapiV1MarginPriceIndexGetAsync(String symbol, final ApiCallback<InlineResponse20014> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sapiV1MarginPriceIndexGetValidateBeforeCall(symbol, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20014>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sapiV1MarginRepayGet
     * @param asset The asset being transferred, e.g., BTC (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param txId the tranId in  &#x60;POST /sapi/v1/margin/repay&#x60; (optional)
     * @param startTime Timestamp in ms (optional)
     * @param endTime Timestamp in ms (optional)
     * @param current Currently querying page. Start from 1. Default:1 (optional)
     * @param size Default:10 Max:100 (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sapiV1MarginRepayGetCall(String asset, Integer timestamp, String signature, Integer txId, Integer startTime, Integer endTime, BigDecimal current, BigDecimal size, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/sapi/v1/margin/repay";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (asset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("asset", asset));
        if (txId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("txId", txId));
        if (startTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startTime", startTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endTime", endTime));
        if (current != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("current", current));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (recvWindow != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recvWindow", recvWindow));
        if (timestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timestamp", timestamp));
        if (signature != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signature", signature));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sapiV1MarginRepayGetValidateBeforeCall(String asset, Integer timestamp, String signature, Integer txId, Integer startTime, Integer endTime, BigDecimal current, BigDecimal size, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'asset' is set
        if (asset == null) {
            throw new ApiException("Missing the required parameter 'asset' when calling sapiV1MarginRepayGet(Async)");
        }
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling sapiV1MarginRepayGet(Async)");
        }
        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling sapiV1MarginRepayGet(Async)");
        }
        
        com.squareup.okhttp.Call call = sapiV1MarginRepayGetCall(asset, timestamp, signature, txId, startTime, endTime, current, size, recvWindow, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Query Repay Record (USER_DATA)
     * &#x60;txId&#x60; or &#x60;startTime&#x60; must be sent. txId takes precedence. Weight: 1
     * @param asset The asset being transferred, e.g., BTC (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param txId the tranId in  &#x60;POST /sapi/v1/margin/repay&#x60; (optional)
     * @param startTime Timestamp in ms (optional)
     * @param endTime Timestamp in ms (optional)
     * @param current Currently querying page. Start from 1. Default:1 (optional)
     * @param size Default:10 Max:100 (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return InlineResponse2009
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2009 sapiV1MarginRepayGet(String asset, Integer timestamp, String signature, Integer txId, Integer startTime, Integer endTime, BigDecimal current, BigDecimal size, Integer recvWindow) throws ApiException {
        ApiResponse<InlineResponse2009> resp = sapiV1MarginRepayGetWithHttpInfo(asset, timestamp, signature, txId, startTime, endTime, current, size, recvWindow);
        return resp.getData();
    }

    /**
     * Query Repay Record (USER_DATA)
     * &#x60;txId&#x60; or &#x60;startTime&#x60; must be sent. txId takes precedence. Weight: 1
     * @param asset The asset being transferred, e.g., BTC (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param txId the tranId in  &#x60;POST /sapi/v1/margin/repay&#x60; (optional)
     * @param startTime Timestamp in ms (optional)
     * @param endTime Timestamp in ms (optional)
     * @param current Currently querying page. Start from 1. Default:1 (optional)
     * @param size Default:10 Max:100 (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return ApiResponse&lt;InlineResponse2009&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2009> sapiV1MarginRepayGetWithHttpInfo(String asset, Integer timestamp, String signature, Integer txId, Integer startTime, Integer endTime, BigDecimal current, BigDecimal size, Integer recvWindow) throws ApiException {
        com.squareup.okhttp.Call call = sapiV1MarginRepayGetValidateBeforeCall(asset, timestamp, signature, txId, startTime, endTime, current, size, recvWindow, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2009>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query Repay Record (USER_DATA) (asynchronously)
     * &#x60;txId&#x60; or &#x60;startTime&#x60; must be sent. txId takes precedence. Weight: 1
     * @param asset The asset being transferred, e.g., BTC (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param txId the tranId in  &#x60;POST /sapi/v1/margin/repay&#x60; (optional)
     * @param startTime Timestamp in ms (optional)
     * @param endTime Timestamp in ms (optional)
     * @param current Currently querying page. Start from 1. Default:1 (optional)
     * @param size Default:10 Max:100 (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sapiV1MarginRepayGetAsync(String asset, Integer timestamp, String signature, Integer txId, Integer startTime, Integer endTime, BigDecimal current, BigDecimal size, Integer recvWindow, final ApiCallback<InlineResponse2009> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sapiV1MarginRepayGetValidateBeforeCall(asset, timestamp, signature, txId, startTime, endTime, current, size, recvWindow, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2009>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sapiV1MarginRepayPost
     * @param asset The asset being transferred, e.g., BTC (required)
     * @param amount  (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sapiV1MarginRepayPostCall(String asset, Float amount, Integer timestamp, String signature, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/sapi/v1/margin/repay";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (asset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("asset", asset));
        if (amount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("amount", amount));
        if (recvWindow != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recvWindow", recvWindow));
        if (timestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timestamp", timestamp));
        if (signature != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signature", signature));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sapiV1MarginRepayPostValidateBeforeCall(String asset, Float amount, Integer timestamp, String signature, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'asset' is set
        if (asset == null) {
            throw new ApiException("Missing the required parameter 'asset' when calling sapiV1MarginRepayPost(Async)");
        }
        // verify the required parameter 'amount' is set
        if (amount == null) {
            throw new ApiException("Missing the required parameter 'amount' when calling sapiV1MarginRepayPost(Async)");
        }
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling sapiV1MarginRepayPost(Async)");
        }
        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling sapiV1MarginRepayPost(Async)");
        }
        
        com.squareup.okhttp.Call call = sapiV1MarginRepayPostCall(asset, amount, timestamp, signature, recvWindow, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Margin Account Repay (MARGIN)
     * Repay loan for margin account.  Weight: 1
     * @param asset The asset being transferred, e.g., BTC (required)
     * @param amount  (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return Transaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Transaction sapiV1MarginRepayPost(String asset, Float amount, Integer timestamp, String signature, Integer recvWindow) throws ApiException {
        ApiResponse<Transaction> resp = sapiV1MarginRepayPostWithHttpInfo(asset, amount, timestamp, signature, recvWindow);
        return resp.getData();
    }

    /**
     * Margin Account Repay (MARGIN)
     * Repay loan for margin account.  Weight: 1
     * @param asset The asset being transferred, e.g., BTC (required)
     * @param amount  (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return ApiResponse&lt;Transaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Transaction> sapiV1MarginRepayPostWithHttpInfo(String asset, Float amount, Integer timestamp, String signature, Integer recvWindow) throws ApiException {
        com.squareup.okhttp.Call call = sapiV1MarginRepayPostValidateBeforeCall(asset, amount, timestamp, signature, recvWindow, null, null);
        Type localVarReturnType = new TypeToken<Transaction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Margin Account Repay (MARGIN) (asynchronously)
     * Repay loan for margin account.  Weight: 1
     * @param asset The asset being transferred, e.g., BTC (required)
     * @param amount  (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sapiV1MarginRepayPostAsync(String asset, Float amount, Integer timestamp, String signature, Integer recvWindow, final ApiCallback<Transaction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sapiV1MarginRepayPostValidateBeforeCall(asset, amount, timestamp, signature, recvWindow, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Transaction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sapiV1MarginTransferGet
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param asset The asset being transferred, e.g., BTC (optional)
     * @param type Tranfer Type (optional)
     * @param startTime Timestamp in ms (optional)
     * @param endTime Timestamp in ms (optional)
     * @param current Currently querying page. Start from 1. Default:1 (optional)
     * @param size Default:10 Max:100 (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sapiV1MarginTransferGetCall(Integer timestamp, String signature, String asset, String type, Integer startTime, Integer endTime, BigDecimal current, BigDecimal size, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/sapi/v1/margin/transfer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (asset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("asset", asset));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (startTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startTime", startTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endTime", endTime));
        if (current != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("current", current));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (recvWindow != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recvWindow", recvWindow));
        if (timestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timestamp", timestamp));
        if (signature != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signature", signature));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sapiV1MarginTransferGetValidateBeforeCall(Integer timestamp, String signature, String asset, String type, Integer startTime, Integer endTime, BigDecimal current, BigDecimal size, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling sapiV1MarginTransferGet(Async)");
        }
        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling sapiV1MarginTransferGet(Async)");
        }
        
        com.squareup.okhttp.Call call = sapiV1MarginTransferGetCall(timestamp, signature, asset, type, startTime, endTime, current, size, recvWindow, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Transfer History (USER_DATA)
     * Weight: 1
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param asset The asset being transferred, e.g., BTC (optional)
     * @param type Tranfer Type (optional)
     * @param startTime Timestamp in ms (optional)
     * @param endTime Timestamp in ms (optional)
     * @param current Currently querying page. Start from 1. Default:1 (optional)
     * @param size Default:10 Max:100 (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object sapiV1MarginTransferGet(Integer timestamp, String signature, String asset, String type, Integer startTime, Integer endTime, BigDecimal current, BigDecimal size, Integer recvWindow) throws ApiException {
        ApiResponse<Object> resp = sapiV1MarginTransferGetWithHttpInfo(timestamp, signature, asset, type, startTime, endTime, current, size, recvWindow);
        return resp.getData();
    }

    /**
     * Get Transfer History (USER_DATA)
     * Weight: 1
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param asset The asset being transferred, e.g., BTC (optional)
     * @param type Tranfer Type (optional)
     * @param startTime Timestamp in ms (optional)
     * @param endTime Timestamp in ms (optional)
     * @param current Currently querying page. Start from 1. Default:1 (optional)
     * @param size Default:10 Max:100 (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> sapiV1MarginTransferGetWithHttpInfo(Integer timestamp, String signature, String asset, String type, Integer startTime, Integer endTime, BigDecimal current, BigDecimal size, Integer recvWindow) throws ApiException {
        com.squareup.okhttp.Call call = sapiV1MarginTransferGetValidateBeforeCall(timestamp, signature, asset, type, startTime, endTime, current, size, recvWindow, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Transfer History (USER_DATA) (asynchronously)
     * Weight: 1
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param asset The asset being transferred, e.g., BTC (optional)
     * @param type Tranfer Type (optional)
     * @param startTime Timestamp in ms (optional)
     * @param endTime Timestamp in ms (optional)
     * @param current Currently querying page. Start from 1. Default:1 (optional)
     * @param size Default:10 Max:100 (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sapiV1MarginTransferGetAsync(Integer timestamp, String signature, String asset, String type, Integer startTime, Integer endTime, BigDecimal current, BigDecimal size, Integer recvWindow, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sapiV1MarginTransferGetValidateBeforeCall(timestamp, signature, asset, type, startTime, endTime, current, size, recvWindow, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sapiV1MarginTransferPost
     * @param asset The asset being transferred, e.g., BTC (required)
     * @param amount  (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param type 1 -&gt; transfer from main account to margin account \\ 2 -&gt; transfer from margin account to main account   (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sapiV1MarginTransferPostCall(String asset, Float amount, Integer timestamp, String signature, Integer type, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/sapi/v1/margin/transfer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (asset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("asset", asset));
        if (amount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("amount", amount));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (recvWindow != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recvWindow", recvWindow));
        if (timestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timestamp", timestamp));
        if (signature != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signature", signature));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sapiV1MarginTransferPostValidateBeforeCall(String asset, Float amount, Integer timestamp, String signature, Integer type, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'asset' is set
        if (asset == null) {
            throw new ApiException("Missing the required parameter 'asset' when calling sapiV1MarginTransferPost(Async)");
        }
        // verify the required parameter 'amount' is set
        if (amount == null) {
            throw new ApiException("Missing the required parameter 'amount' when calling sapiV1MarginTransferPost(Async)");
        }
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling sapiV1MarginTransferPost(Async)");
        }
        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling sapiV1MarginTransferPost(Async)");
        }
        
        com.squareup.okhttp.Call call = sapiV1MarginTransferPostCall(asset, amount, timestamp, signature, type, recvWindow, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Margin Account Transfer (MARGIN)
     * Execute transfer between spot account and margin account.  Weight: 1
     * @param asset The asset being transferred, e.g., BTC (required)
     * @param amount  (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param type 1 -&gt; transfer from main account to margin account \\ 2 -&gt; transfer from margin account to main account   (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return Transaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Transaction sapiV1MarginTransferPost(String asset, Float amount, Integer timestamp, String signature, Integer type, Integer recvWindow) throws ApiException {
        ApiResponse<Transaction> resp = sapiV1MarginTransferPostWithHttpInfo(asset, amount, timestamp, signature, type, recvWindow);
        return resp.getData();
    }

    /**
     * Margin Account Transfer (MARGIN)
     * Execute transfer between spot account and margin account.  Weight: 1
     * @param asset The asset being transferred, e.g., BTC (required)
     * @param amount  (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param type 1 -&gt; transfer from main account to margin account \\ 2 -&gt; transfer from margin account to main account   (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return ApiResponse&lt;Transaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Transaction> sapiV1MarginTransferPostWithHttpInfo(String asset, Float amount, Integer timestamp, String signature, Integer type, Integer recvWindow) throws ApiException {
        com.squareup.okhttp.Call call = sapiV1MarginTransferPostValidateBeforeCall(asset, amount, timestamp, signature, type, recvWindow, null, null);
        Type localVarReturnType = new TypeToken<Transaction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Margin Account Transfer (MARGIN) (asynchronously)
     * Execute transfer between spot account and margin account.  Weight: 1
     * @param asset The asset being transferred, e.g., BTC (required)
     * @param amount  (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param type 1 -&gt; transfer from main account to margin account \\ 2 -&gt; transfer from margin account to main account   (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sapiV1MarginTransferPostAsync(String asset, Float amount, Integer timestamp, String signature, Integer type, Integer recvWindow, final ApiCallback<Transaction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sapiV1MarginTransferPostValidateBeforeCall(asset, amount, timestamp, signature, type, recvWindow, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Transaction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
