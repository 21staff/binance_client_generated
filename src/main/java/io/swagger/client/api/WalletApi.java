/*
 * Binance SPOT Public API
 * The swagger file of Binance Public API  API documents:   - [https://github.com/binance-exchange/binance-official-api-docs](https://github.com/binance-exchange/binance-official-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Error;
import io.swagger.client.model.InlineResponse20018;
import io.swagger.client.model.InlineResponse20019;
import io.swagger.client.model.InlineResponse20020;
import io.swagger.client.model.InlineResponse20021;
import io.swagger.client.model.InlineResponse20022;
import io.swagger.client.model.InlineResponse20023;
import io.swagger.client.model.InlineResponse20024;
import io.swagger.client.model.InlineResponse20025;
import io.swagger.client.model.InlineResponse20026;
import io.swagger.client.model.InlineResponse20027;
import io.swagger.client.model.InlineResponse20028;
import io.swagger.client.model.InlineResponse20029;
import io.swagger.client.model.InlineResponse20030;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WalletApi {
    private ApiClient apiClient;

    public WalletApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WalletApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for sapiV1AccountDisableFastWithdrawSwitchPost
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sapiV1AccountDisableFastWithdrawSwitchPostCall(Integer timestamp, String signature, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/sapi/v1/account/disableFastWithdrawSwitch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (timestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timestamp", timestamp));
        if (recvWindow != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recvWindow", recvWindow));
        if (signature != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signature", signature));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sapiV1AccountDisableFastWithdrawSwitchPostValidateBeforeCall(Integer timestamp, String signature, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling sapiV1AccountDisableFastWithdrawSwitchPost(Async)");
        }
        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling sapiV1AccountDisableFastWithdrawSwitchPost(Async)");
        }
        
        com.squareup.okhttp.Call call = sapiV1AccountDisableFastWithdrawSwitchPostCall(timestamp, signature, recvWindow, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Disable Fast Withdraw Switch (USER_DATA)
     * This request will disable fastwithdraw switch under your account. You need to enable \&quot;trade\&quot; option for the api key which requests this endpoint.  Weight: 1
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void sapiV1AccountDisableFastWithdrawSwitchPost(Integer timestamp, String signature, Integer recvWindow) throws ApiException {
        sapiV1AccountDisableFastWithdrawSwitchPostWithHttpInfo(timestamp, signature, recvWindow);
    }

    /**
     * Disable Fast Withdraw Switch (USER_DATA)
     * This request will disable fastwithdraw switch under your account. You need to enable \&quot;trade\&quot; option for the api key which requests this endpoint.  Weight: 1
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> sapiV1AccountDisableFastWithdrawSwitchPostWithHttpInfo(Integer timestamp, String signature, Integer recvWindow) throws ApiException {
        com.squareup.okhttp.Call call = sapiV1AccountDisableFastWithdrawSwitchPostValidateBeforeCall(timestamp, signature, recvWindow, null, null);
        return apiClient.execute(call);
    }

    /**
     * Disable Fast Withdraw Switch (USER_DATA) (asynchronously)
     * This request will disable fastwithdraw switch under your account. You need to enable \&quot;trade\&quot; option for the api key which requests this endpoint.  Weight: 1
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sapiV1AccountDisableFastWithdrawSwitchPostAsync(Integer timestamp, String signature, Integer recvWindow, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sapiV1AccountDisableFastWithdrawSwitchPostValidateBeforeCall(timestamp, signature, recvWindow, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for sapiV1AccountEnableFastWithdrawSwitchPost
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sapiV1AccountEnableFastWithdrawSwitchPostCall(Integer timestamp, String signature, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/sapi/v1/account/enableFastWithdrawSwitch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (timestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timestamp", timestamp));
        if (recvWindow != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recvWindow", recvWindow));
        if (signature != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signature", signature));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sapiV1AccountEnableFastWithdrawSwitchPostValidateBeforeCall(Integer timestamp, String signature, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling sapiV1AccountEnableFastWithdrawSwitchPost(Async)");
        }
        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling sapiV1AccountEnableFastWithdrawSwitchPost(Async)");
        }
        
        com.squareup.okhttp.Call call = sapiV1AccountEnableFastWithdrawSwitchPostCall(timestamp, signature, recvWindow, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Enable Fast Withdraw Switch (USER_DATA)
     *  - This request will enable fastwithdraw switch under your account. You need to enable \&quot;trade\&quot; option for the api key which requests this endpoint. - When Fast Withdraw Switch is on, transferring funds to a Binance account will be done instantly. There is no on-chain transaction, no transaction ID and no withdrawal fee.  Weight: 1
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void sapiV1AccountEnableFastWithdrawSwitchPost(Integer timestamp, String signature, Integer recvWindow) throws ApiException {
        sapiV1AccountEnableFastWithdrawSwitchPostWithHttpInfo(timestamp, signature, recvWindow);
    }

    /**
     * Enable Fast Withdraw Switch (USER_DATA)
     *  - This request will enable fastwithdraw switch under your account. You need to enable \&quot;trade\&quot; option for the api key which requests this endpoint. - When Fast Withdraw Switch is on, transferring funds to a Binance account will be done instantly. There is no on-chain transaction, no transaction ID and no withdrawal fee.  Weight: 1
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> sapiV1AccountEnableFastWithdrawSwitchPostWithHttpInfo(Integer timestamp, String signature, Integer recvWindow) throws ApiException {
        com.squareup.okhttp.Call call = sapiV1AccountEnableFastWithdrawSwitchPostValidateBeforeCall(timestamp, signature, recvWindow, null, null);
        return apiClient.execute(call);
    }

    /**
     * Enable Fast Withdraw Switch (USER_DATA) (asynchronously)
     *  - This request will enable fastwithdraw switch under your account. You need to enable \&quot;trade\&quot; option for the api key which requests this endpoint. - When Fast Withdraw Switch is on, transferring funds to a Binance account will be done instantly. There is no on-chain transaction, no transaction ID and no withdrawal fee.  Weight: 1
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sapiV1AccountEnableFastWithdrawSwitchPostAsync(Integer timestamp, String signature, Integer recvWindow, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sapiV1AccountEnableFastWithdrawSwitchPostValidateBeforeCall(timestamp, signature, recvWindow, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for sapiV1AccountSnapshotGet
     * @param type  (required)
     * @param limit  (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param startTime Timestamp in ms (optional)
     * @param endTime Timestamp in ms (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sapiV1AccountSnapshotGetCall(String type, Integer limit, Integer timestamp, String signature, Integer startTime, Integer endTime, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/sapi/v1/accountSnapshot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (startTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startTime", startTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endTime", endTime));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (timestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timestamp", timestamp));
        if (recvWindow != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recvWindow", recvWindow));
        if (signature != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signature", signature));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sapiV1AccountSnapshotGetValidateBeforeCall(String type, Integer limit, Integer timestamp, String signature, Integer startTime, Integer endTime, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling sapiV1AccountSnapshotGet(Async)");
        }
        // verify the required parameter 'limit' is set
        if (limit == null) {
            throw new ApiException("Missing the required parameter 'limit' when calling sapiV1AccountSnapshotGet(Async)");
        }
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling sapiV1AccountSnapshotGet(Async)");
        }
        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling sapiV1AccountSnapshotGet(Async)");
        }
        
        com.squareup.okhttp.Call call = sapiV1AccountSnapshotGetCall(type, limit, timestamp, signature, startTime, endTime, recvWindow, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Daily Account Snapshot (USER_DATA)
     *  Weight: 1
     * @param type  (required)
     * @param limit  (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param startTime Timestamp in ms (optional)
     * @param endTime Timestamp in ms (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return InlineResponse20019
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20019 sapiV1AccountSnapshotGet(String type, Integer limit, Integer timestamp, String signature, Integer startTime, Integer endTime, Integer recvWindow) throws ApiException {
        ApiResponse<InlineResponse20019> resp = sapiV1AccountSnapshotGetWithHttpInfo(type, limit, timestamp, signature, startTime, endTime, recvWindow);
        return resp.getData();
    }

    /**
     * Daily Account Snapshot (USER_DATA)
     *  Weight: 1
     * @param type  (required)
     * @param limit  (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param startTime Timestamp in ms (optional)
     * @param endTime Timestamp in ms (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return ApiResponse&lt;InlineResponse20019&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20019> sapiV1AccountSnapshotGetWithHttpInfo(String type, Integer limit, Integer timestamp, String signature, Integer startTime, Integer endTime, Integer recvWindow) throws ApiException {
        com.squareup.okhttp.Call call = sapiV1AccountSnapshotGetValidateBeforeCall(type, limit, timestamp, signature, startTime, endTime, recvWindow, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20019>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Daily Account Snapshot (USER_DATA) (asynchronously)
     *  Weight: 1
     * @param type  (required)
     * @param limit  (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param startTime Timestamp in ms (optional)
     * @param endTime Timestamp in ms (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sapiV1AccountSnapshotGetAsync(String type, Integer limit, Integer timestamp, String signature, Integer startTime, Integer endTime, Integer recvWindow, final ApiCallback<InlineResponse20019> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sapiV1AccountSnapshotGetValidateBeforeCall(type, limit, timestamp, signature, startTime, endTime, recvWindow, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20019>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sapiV1AssetAssetDividendGet
     * @param limit  (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param asset The asset being transferred, e.g., BTC (optional)
     * @param startTime Timestamp in ms (optional)
     * @param endTime Timestamp in ms (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sapiV1AssetAssetDividendGetCall(String limit, Integer timestamp, String signature, String asset, Integer startTime, Integer endTime, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/sapi/v1/asset/assetDividend";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (asset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("asset", asset));
        if (startTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startTime", startTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endTime", endTime));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (timestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timestamp", timestamp));
        if (recvWindow != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recvWindow", recvWindow));
        if (signature != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signature", signature));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sapiV1AssetAssetDividendGetValidateBeforeCall(String limit, Integer timestamp, String signature, String asset, Integer startTime, Integer endTime, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'limit' is set
        if (limit == null) {
            throw new ApiException("Missing the required parameter 'limit' when calling sapiV1AssetAssetDividendGet(Async)");
        }
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling sapiV1AssetAssetDividendGet(Async)");
        }
        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling sapiV1AssetAssetDividendGet(Async)");
        }
        
        com.squareup.okhttp.Call call = sapiV1AssetAssetDividendGetCall(limit, timestamp, signature, asset, startTime, endTime, recvWindow, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Dust Transfer
     * Query asset Dividend Record   Weight: 1
     * @param limit  (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param asset The asset being transferred, e.g., BTC (optional)
     * @param startTime Timestamp in ms (optional)
     * @param endTime Timestamp in ms (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return InlineResponse20028
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20028 sapiV1AssetAssetDividendGet(String limit, Integer timestamp, String signature, String asset, Integer startTime, Integer endTime, Integer recvWindow) throws ApiException {
        ApiResponse<InlineResponse20028> resp = sapiV1AssetAssetDividendGetWithHttpInfo(limit, timestamp, signature, asset, startTime, endTime, recvWindow);
        return resp.getData();
    }

    /**
     * Dust Transfer
     * Query asset Dividend Record   Weight: 1
     * @param limit  (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param asset The asset being transferred, e.g., BTC (optional)
     * @param startTime Timestamp in ms (optional)
     * @param endTime Timestamp in ms (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return ApiResponse&lt;InlineResponse20028&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20028> sapiV1AssetAssetDividendGetWithHttpInfo(String limit, Integer timestamp, String signature, String asset, Integer startTime, Integer endTime, Integer recvWindow) throws ApiException {
        com.squareup.okhttp.Call call = sapiV1AssetAssetDividendGetValidateBeforeCall(limit, timestamp, signature, asset, startTime, endTime, recvWindow, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20028>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Dust Transfer (asynchronously)
     * Query asset Dividend Record   Weight: 1
     * @param limit  (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param asset The asset being transferred, e.g., BTC (optional)
     * @param startTime Timestamp in ms (optional)
     * @param endTime Timestamp in ms (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sapiV1AssetAssetDividendGetAsync(String limit, Integer timestamp, String signature, String asset, Integer startTime, Integer endTime, Integer recvWindow, final ApiCallback<InlineResponse20028> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sapiV1AssetAssetDividendGetValidateBeforeCall(limit, timestamp, signature, asset, startTime, endTime, recvWindow, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20028>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sapiV1AssetDustPost
     * @param asset The asset being converted. For example, asset&#x3D;BTC&amp;asset&#x3D;USDT (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sapiV1AssetDustPostCall(String asset, Integer timestamp, String signature, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/sapi/v1/asset/dust";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (asset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("asset", asset));
        if (timestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timestamp", timestamp));
        if (recvWindow != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recvWindow", recvWindow));
        if (signature != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signature", signature));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sapiV1AssetDustPostValidateBeforeCall(String asset, Integer timestamp, String signature, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'asset' is set
        if (asset == null) {
            throw new ApiException("Missing the required parameter 'asset' when calling sapiV1AssetDustPost(Async)");
        }
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling sapiV1AssetDustPost(Async)");
        }
        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling sapiV1AssetDustPost(Async)");
        }
        
        com.squareup.okhttp.Call call = sapiV1AssetDustPostCall(asset, timestamp, signature, recvWindow, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Dust Transfer
     * Convert dust assets to BNB.  Weight: 1
     * @param asset The asset being converted. For example, asset&#x3D;BTC&amp;asset&#x3D;USDT (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return InlineResponse20027
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20027 sapiV1AssetDustPost(String asset, Integer timestamp, String signature, Integer recvWindow) throws ApiException {
        ApiResponse<InlineResponse20027> resp = sapiV1AssetDustPostWithHttpInfo(asset, timestamp, signature, recvWindow);
        return resp.getData();
    }

    /**
     * Dust Transfer
     * Convert dust assets to BNB.  Weight: 1
     * @param asset The asset being converted. For example, asset&#x3D;BTC&amp;asset&#x3D;USDT (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return ApiResponse&lt;InlineResponse20027&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20027> sapiV1AssetDustPostWithHttpInfo(String asset, Integer timestamp, String signature, Integer recvWindow) throws ApiException {
        com.squareup.okhttp.Call call = sapiV1AssetDustPostValidateBeforeCall(asset, timestamp, signature, recvWindow, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20027>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Dust Transfer (asynchronously)
     * Convert dust assets to BNB.  Weight: 1
     * @param asset The asset being converted. For example, asset&#x3D;BTC&amp;asset&#x3D;USDT (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sapiV1AssetDustPostAsync(String asset, Integer timestamp, String signature, Integer recvWindow, final ApiCallback<InlineResponse20027> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sapiV1AssetDustPostValidateBeforeCall(asset, timestamp, signature, recvWindow, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20027>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sapiV1CapitalConfigGetallGet
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sapiV1CapitalConfigGetallGetCall(Integer timestamp, String signature, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/sapi/v1/capital/config/getall";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (recvWindow != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recvWindow", recvWindow));
        if (timestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timestamp", timestamp));
        if (signature != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signature", signature));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sapiV1CapitalConfigGetallGetValidateBeforeCall(Integer timestamp, String signature, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling sapiV1CapitalConfigGetallGet(Async)");
        }
        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling sapiV1CapitalConfigGetallGet(Async)");
        }
        
        com.squareup.okhttp.Call call = sapiV1CapitalConfigGetallGetCall(timestamp, signature, recvWindow, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * All Coins&#x27; Information (USER_DATA)
     * Get information of coins (available for deposit and withdraw) for user.  Weight: 1
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return InlineResponse20018
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20018 sapiV1CapitalConfigGetallGet(Integer timestamp, String signature, Integer recvWindow) throws ApiException {
        ApiResponse<InlineResponse20018> resp = sapiV1CapitalConfigGetallGetWithHttpInfo(timestamp, signature, recvWindow);
        return resp.getData();
    }

    /**
     * All Coins&#x27; Information (USER_DATA)
     * Get information of coins (available for deposit and withdraw) for user.  Weight: 1
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return ApiResponse&lt;InlineResponse20018&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20018> sapiV1CapitalConfigGetallGetWithHttpInfo(Integer timestamp, String signature, Integer recvWindow) throws ApiException {
        com.squareup.okhttp.Call call = sapiV1CapitalConfigGetallGetValidateBeforeCall(timestamp, signature, recvWindow, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20018>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * All Coins&#x27; Information (USER_DATA) (asynchronously)
     * Get information of coins (available for deposit and withdraw) for user.  Weight: 1
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sapiV1CapitalConfigGetallGetAsync(Integer timestamp, String signature, Integer recvWindow, final ApiCallback<InlineResponse20018> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sapiV1CapitalConfigGetallGetValidateBeforeCall(timestamp, signature, recvWindow, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20018>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sapiV1CapitalDepositAddressGet
     * @param coin coin name (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param network  (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sapiV1CapitalDepositAddressGetCall(String coin, Integer timestamp, String signature, String network, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/sapi/v1/capital/deposit/address";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (coin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("coin", coin));
        if (network != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("network", network));
        if (timestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timestamp", timestamp));
        if (recvWindow != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recvWindow", recvWindow));
        if (signature != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signature", signature));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sapiV1CapitalDepositAddressGetValidateBeforeCall(String coin, Integer timestamp, String signature, String network, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'coin' is set
        if (coin == null) {
            throw new ApiException("Missing the required parameter 'coin' when calling sapiV1CapitalDepositAddressGet(Async)");
        }
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling sapiV1CapitalDepositAddressGet(Async)");
        }
        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling sapiV1CapitalDepositAddressGet(Async)");
        }
        
        com.squareup.okhttp.Call call = sapiV1CapitalDepositAddressGetCall(coin, timestamp, signature, network, recvWindow, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Withdraw History (supporting network) (USER_DATA)
     * Fetch withdraw history.  - network may not be in the response for old withdraw. - Please notice the default startTime and endTime to make sure that time interval is within 0-90 days. - If both startTime and endTime are sent, time between startTime and endTime must be less than 90 days  Weight: 1
     * @param coin coin name (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param network  (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return InlineResponse20023
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20023 sapiV1CapitalDepositAddressGet(String coin, Integer timestamp, String signature, String network, Integer recvWindow) throws ApiException {
        ApiResponse<InlineResponse20023> resp = sapiV1CapitalDepositAddressGetWithHttpInfo(coin, timestamp, signature, network, recvWindow);
        return resp.getData();
    }

    /**
     * Withdraw History (supporting network) (USER_DATA)
     * Fetch withdraw history.  - network may not be in the response for old withdraw. - Please notice the default startTime and endTime to make sure that time interval is within 0-90 days. - If both startTime and endTime are sent, time between startTime and endTime must be less than 90 days  Weight: 1
     * @param coin coin name (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param network  (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return ApiResponse&lt;InlineResponse20023&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20023> sapiV1CapitalDepositAddressGetWithHttpInfo(String coin, Integer timestamp, String signature, String network, Integer recvWindow) throws ApiException {
        com.squareup.okhttp.Call call = sapiV1CapitalDepositAddressGetValidateBeforeCall(coin, timestamp, signature, network, recvWindow, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20023>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Withdraw History (supporting network) (USER_DATA) (asynchronously)
     * Fetch withdraw history.  - network may not be in the response for old withdraw. - Please notice the default startTime and endTime to make sure that time interval is within 0-90 days. - If both startTime and endTime are sent, time between startTime and endTime must be less than 90 days  Weight: 1
     * @param coin coin name (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param network  (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sapiV1CapitalDepositAddressGetAsync(String coin, Integer timestamp, String signature, String network, Integer recvWindow, final ApiCallback<InlineResponse20023> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sapiV1CapitalDepositAddressGetValidateBeforeCall(coin, timestamp, signature, network, recvWindow, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20023>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sapiV1CapitalDepositHisrecGet
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param coin  (optional)
     * @param status 0 -&gt; pending\\ 6 -&gt; credited but cannot withdraw\\ 1 -&gt; success (optional)
     * @param startTime Timestamp in ms (optional)
     * @param endTime Timestamp in ms (optional)
     * @param offset  (optional)
     * @param limit Default 500; max 1000. (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sapiV1CapitalDepositHisrecGetCall(Integer timestamp, String signature, String coin, Integer status, Integer startTime, Integer endTime, Integer offset, Integer limit, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/sapi/v1/capital/deposit/hisrec";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (coin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("coin", coin));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (startTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startTime", startTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endTime", endTime));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (timestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timestamp", timestamp));
        if (recvWindow != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recvWindow", recvWindow));
        if (signature != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signature", signature));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sapiV1CapitalDepositHisrecGetValidateBeforeCall(Integer timestamp, String signature, String coin, Integer status, Integer startTime, Integer endTime, Integer offset, Integer limit, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling sapiV1CapitalDepositHisrecGet(Async)");
        }
        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling sapiV1CapitalDepositHisrecGet(Async)");
        }
        
        com.squareup.okhttp.Call call = sapiV1CapitalDepositHisrecGetCall(timestamp, signature, coin, status, startTime, endTime, offset, limit, recvWindow, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deposit History（supporting network） (USER_DATA)
     * Fetch deposit history.  - Please notice the default startTime and endTime to make sure that time interval is within 0-90 days. - If both startTime and endTime are sent, time between startTime and endTime must be less than 90 days.  Weight: 1
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param coin  (optional)
     * @param status 0 -&gt; pending\\ 6 -&gt; credited but cannot withdraw\\ 1 -&gt; success (optional)
     * @param startTime Timestamp in ms (optional)
     * @param endTime Timestamp in ms (optional)
     * @param offset  (optional)
     * @param limit Default 500; max 1000. (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return List&lt;InlineResponse20021&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<InlineResponse20021> sapiV1CapitalDepositHisrecGet(Integer timestamp, String signature, String coin, Integer status, Integer startTime, Integer endTime, Integer offset, Integer limit, Integer recvWindow) throws ApiException {
        ApiResponse<List<InlineResponse20021>> resp = sapiV1CapitalDepositHisrecGetWithHttpInfo(timestamp, signature, coin, status, startTime, endTime, offset, limit, recvWindow);
        return resp.getData();
    }

    /**
     * Deposit History（supporting network） (USER_DATA)
     * Fetch deposit history.  - Please notice the default startTime and endTime to make sure that time interval is within 0-90 days. - If both startTime and endTime are sent, time between startTime and endTime must be less than 90 days.  Weight: 1
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param coin  (optional)
     * @param status 0 -&gt; pending\\ 6 -&gt; credited but cannot withdraw\\ 1 -&gt; success (optional)
     * @param startTime Timestamp in ms (optional)
     * @param endTime Timestamp in ms (optional)
     * @param offset  (optional)
     * @param limit Default 500; max 1000. (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return ApiResponse&lt;List&lt;InlineResponse20021&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<InlineResponse20021>> sapiV1CapitalDepositHisrecGetWithHttpInfo(Integer timestamp, String signature, String coin, Integer status, Integer startTime, Integer endTime, Integer offset, Integer limit, Integer recvWindow) throws ApiException {
        com.squareup.okhttp.Call call = sapiV1CapitalDepositHisrecGetValidateBeforeCall(timestamp, signature, coin, status, startTime, endTime, offset, limit, recvWindow, null, null);
        Type localVarReturnType = new TypeToken<List<InlineResponse20021>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deposit History（supporting network） (USER_DATA) (asynchronously)
     * Fetch deposit history.  - Please notice the default startTime and endTime to make sure that time interval is within 0-90 days. - If both startTime and endTime are sent, time between startTime and endTime must be less than 90 days.  Weight: 1
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param coin  (optional)
     * @param status 0 -&gt; pending\\ 6 -&gt; credited but cannot withdraw\\ 1 -&gt; success (optional)
     * @param startTime Timestamp in ms (optional)
     * @param endTime Timestamp in ms (optional)
     * @param offset  (optional)
     * @param limit Default 500; max 1000. (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sapiV1CapitalDepositHisrecGetAsync(Integer timestamp, String signature, String coin, Integer status, Integer startTime, Integer endTime, Integer offset, Integer limit, Integer recvWindow, final ApiCallback<List<InlineResponse20021>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sapiV1CapitalDepositHisrecGetValidateBeforeCall(timestamp, signature, coin, status, startTime, endTime, offset, limit, recvWindow, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<InlineResponse20021>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sapiV1CapitalWithdrawApplyPost
     * @param coin coin name (required)
     * @param address  (required)
     * @param amount  (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param withdrawOrderId client id for withdraw (optional)
     * @param network getting value from &#x60;GET /sapi/v1/capital/config/getall&#x60; (optional)
     * @param addressTag Secondary address identifier for coins like XRP,XMR etc. (optional)
     * @param transactionFeeFlag When making internal transfer - &#x60;true&#x60; -&gt;  returning the fee to the destination account;  - &#x60;false&#x60; -&gt; returning the fee back to the departure account.  (optional, default to false)
     * @param name  (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sapiV1CapitalWithdrawApplyPostCall(String coin, String address, Float amount, Integer timestamp, String signature, String withdrawOrderId, String network, String addressTag, Boolean transactionFeeFlag, String name, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/sapi/v1/capital/withdraw/apply";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (coin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("coin", coin));
        if (withdrawOrderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("withdrawOrderId", withdrawOrderId));
        if (network != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("network", network));
        if (address != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("address", address));
        if (addressTag != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("addressTag", addressTag));
        if (amount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("amount", amount));
        if (transactionFeeFlag != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("transactionFeeFlag", transactionFeeFlag));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (timestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timestamp", timestamp));
        if (recvWindow != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recvWindow", recvWindow));
        if (signature != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signature", signature));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sapiV1CapitalWithdrawApplyPostValidateBeforeCall(String coin, String address, Float amount, Integer timestamp, String signature, String withdrawOrderId, String network, String addressTag, Boolean transactionFeeFlag, String name, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'coin' is set
        if (coin == null) {
            throw new ApiException("Missing the required parameter 'coin' when calling sapiV1CapitalWithdrawApplyPost(Async)");
        }
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling sapiV1CapitalWithdrawApplyPost(Async)");
        }
        // verify the required parameter 'amount' is set
        if (amount == null) {
            throw new ApiException("Missing the required parameter 'amount' when calling sapiV1CapitalWithdrawApplyPost(Async)");
        }
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling sapiV1CapitalWithdrawApplyPost(Async)");
        }
        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling sapiV1CapitalWithdrawApplyPost(Async)");
        }
        
        com.squareup.okhttp.Call call = sapiV1CapitalWithdrawApplyPostCall(coin, address, amount, timestamp, signature, withdrawOrderId, network, addressTag, transactionFeeFlag, name, recvWindow, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Withdraw
     * Submit a withdraw request.  - If network not send, return with default network of the coin. - You can get network and isDefault in networkList of a coin in the response of &#x60;Get /sapi/v1/capital/config/getall (HMAC SHA256)&#x60;.  Weight: 1
     * @param coin coin name (required)
     * @param address  (required)
     * @param amount  (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param withdrawOrderId client id for withdraw (optional)
     * @param network getting value from &#x60;GET /sapi/v1/capital/config/getall&#x60; (optional)
     * @param addressTag Secondary address identifier for coins like XRP,XMR etc. (optional)
     * @param transactionFeeFlag When making internal transfer - &#x60;true&#x60; -&gt;  returning the fee to the destination account;  - &#x60;false&#x60; -&gt; returning the fee back to the departure account.  (optional, default to false)
     * @param name  (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return InlineResponse20020
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20020 sapiV1CapitalWithdrawApplyPost(String coin, String address, Float amount, Integer timestamp, String signature, String withdrawOrderId, String network, String addressTag, Boolean transactionFeeFlag, String name, Integer recvWindow) throws ApiException {
        ApiResponse<InlineResponse20020> resp = sapiV1CapitalWithdrawApplyPostWithHttpInfo(coin, address, amount, timestamp, signature, withdrawOrderId, network, addressTag, transactionFeeFlag, name, recvWindow);
        return resp.getData();
    }

    /**
     * Withdraw
     * Submit a withdraw request.  - If network not send, return with default network of the coin. - You can get network and isDefault in networkList of a coin in the response of &#x60;Get /sapi/v1/capital/config/getall (HMAC SHA256)&#x60;.  Weight: 1
     * @param coin coin name (required)
     * @param address  (required)
     * @param amount  (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param withdrawOrderId client id for withdraw (optional)
     * @param network getting value from &#x60;GET /sapi/v1/capital/config/getall&#x60; (optional)
     * @param addressTag Secondary address identifier for coins like XRP,XMR etc. (optional)
     * @param transactionFeeFlag When making internal transfer - &#x60;true&#x60; -&gt;  returning the fee to the destination account;  - &#x60;false&#x60; -&gt; returning the fee back to the departure account.  (optional, default to false)
     * @param name  (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return ApiResponse&lt;InlineResponse20020&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20020> sapiV1CapitalWithdrawApplyPostWithHttpInfo(String coin, String address, Float amount, Integer timestamp, String signature, String withdrawOrderId, String network, String addressTag, Boolean transactionFeeFlag, String name, Integer recvWindow) throws ApiException {
        com.squareup.okhttp.Call call = sapiV1CapitalWithdrawApplyPostValidateBeforeCall(coin, address, amount, timestamp, signature, withdrawOrderId, network, addressTag, transactionFeeFlag, name, recvWindow, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20020>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Withdraw (asynchronously)
     * Submit a withdraw request.  - If network not send, return with default network of the coin. - You can get network and isDefault in networkList of a coin in the response of &#x60;Get /sapi/v1/capital/config/getall (HMAC SHA256)&#x60;.  Weight: 1
     * @param coin coin name (required)
     * @param address  (required)
     * @param amount  (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param withdrawOrderId client id for withdraw (optional)
     * @param network getting value from &#x60;GET /sapi/v1/capital/config/getall&#x60; (optional)
     * @param addressTag Secondary address identifier for coins like XRP,XMR etc. (optional)
     * @param transactionFeeFlag When making internal transfer - &#x60;true&#x60; -&gt;  returning the fee to the destination account;  - &#x60;false&#x60; -&gt; returning the fee back to the departure account.  (optional, default to false)
     * @param name  (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sapiV1CapitalWithdrawApplyPostAsync(String coin, String address, Float amount, Integer timestamp, String signature, String withdrawOrderId, String network, String addressTag, Boolean transactionFeeFlag, String name, Integer recvWindow, final ApiCallback<InlineResponse20020> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sapiV1CapitalWithdrawApplyPostValidateBeforeCall(coin, address, amount, timestamp, signature, withdrawOrderId, network, addressTag, transactionFeeFlag, name, recvWindow, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20020>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sapiV1CapitalWithdrawHistoryGet
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param coin  (optional)
     * @param status 0:Email Sent 1:Cancelled 2:Awaiting Approval  3:Rejected  4:Processing  5:Failure  6:Completed (optional)
     * @param startTime Timestamp in ms (optional)
     * @param endTime Timestamp in ms (optional)
     * @param offset  (optional)
     * @param limit Default 500; max 1000. (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sapiV1CapitalWithdrawHistoryGetCall(Integer timestamp, String signature, String coin, Integer status, Integer startTime, Integer endTime, Integer offset, Integer limit, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/sapi/v1/capital/withdraw/history";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (coin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("coin", coin));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (startTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startTime", startTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endTime", endTime));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (timestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timestamp", timestamp));
        if (recvWindow != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recvWindow", recvWindow));
        if (signature != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signature", signature));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sapiV1CapitalWithdrawHistoryGetValidateBeforeCall(Integer timestamp, String signature, String coin, Integer status, Integer startTime, Integer endTime, Integer offset, Integer limit, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling sapiV1CapitalWithdrawHistoryGet(Async)");
        }
        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling sapiV1CapitalWithdrawHistoryGet(Async)");
        }
        
        com.squareup.okhttp.Call call = sapiV1CapitalWithdrawHistoryGetCall(timestamp, signature, coin, status, startTime, endTime, offset, limit, recvWindow, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Withdraw History (supporting network) (USER_DATA)
     * Fetch withdraw history.  - network may not be in the response for old withdraw. - Please notice the default startTime and endTime to make sure that time interval is within 0-90 days. - If both startTime and endTime are sent, time between startTime and endTime must be less than 90 days  Weight: 1
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param coin  (optional)
     * @param status 0:Email Sent 1:Cancelled 2:Awaiting Approval  3:Rejected  4:Processing  5:Failure  6:Completed (optional)
     * @param startTime Timestamp in ms (optional)
     * @param endTime Timestamp in ms (optional)
     * @param offset  (optional)
     * @param limit Default 500; max 1000. (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return List&lt;InlineResponse20022&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<InlineResponse20022> sapiV1CapitalWithdrawHistoryGet(Integer timestamp, String signature, String coin, Integer status, Integer startTime, Integer endTime, Integer offset, Integer limit, Integer recvWindow) throws ApiException {
        ApiResponse<List<InlineResponse20022>> resp = sapiV1CapitalWithdrawHistoryGetWithHttpInfo(timestamp, signature, coin, status, startTime, endTime, offset, limit, recvWindow);
        return resp.getData();
    }

    /**
     * Withdraw History (supporting network) (USER_DATA)
     * Fetch withdraw history.  - network may not be in the response for old withdraw. - Please notice the default startTime and endTime to make sure that time interval is within 0-90 days. - If both startTime and endTime are sent, time between startTime and endTime must be less than 90 days  Weight: 1
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param coin  (optional)
     * @param status 0:Email Sent 1:Cancelled 2:Awaiting Approval  3:Rejected  4:Processing  5:Failure  6:Completed (optional)
     * @param startTime Timestamp in ms (optional)
     * @param endTime Timestamp in ms (optional)
     * @param offset  (optional)
     * @param limit Default 500; max 1000. (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return ApiResponse&lt;List&lt;InlineResponse20022&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<InlineResponse20022>> sapiV1CapitalWithdrawHistoryGetWithHttpInfo(Integer timestamp, String signature, String coin, Integer status, Integer startTime, Integer endTime, Integer offset, Integer limit, Integer recvWindow) throws ApiException {
        com.squareup.okhttp.Call call = sapiV1CapitalWithdrawHistoryGetValidateBeforeCall(timestamp, signature, coin, status, startTime, endTime, offset, limit, recvWindow, null, null);
        Type localVarReturnType = new TypeToken<List<InlineResponse20022>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Withdraw History (supporting network) (USER_DATA) (asynchronously)
     * Fetch withdraw history.  - network may not be in the response for old withdraw. - Please notice the default startTime and endTime to make sure that time interval is within 0-90 days. - If both startTime and endTime are sent, time between startTime and endTime must be less than 90 days  Weight: 1
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param coin  (optional)
     * @param status 0:Email Sent 1:Cancelled 2:Awaiting Approval  3:Rejected  4:Processing  5:Failure  6:Completed (optional)
     * @param startTime Timestamp in ms (optional)
     * @param endTime Timestamp in ms (optional)
     * @param offset  (optional)
     * @param limit Default 500; max 1000. (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sapiV1CapitalWithdrawHistoryGetAsync(Integer timestamp, String signature, String coin, Integer status, Integer startTime, Integer endTime, Integer offset, Integer limit, Integer recvWindow, final ApiCallback<List<InlineResponse20022>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sapiV1CapitalWithdrawHistoryGetValidateBeforeCall(timestamp, signature, coin, status, startTime, endTime, offset, limit, recvWindow, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<InlineResponse20022>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for wapiV3AccountStatusHtmlGet
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call wapiV3AccountStatusHtmlGetCall(Integer timestamp, String signature, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wapi/v3/accountStatus.html";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (timestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timestamp", timestamp));
        if (recvWindow != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recvWindow", recvWindow));
        if (signature != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signature", signature));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call wapiV3AccountStatusHtmlGetValidateBeforeCall(Integer timestamp, String signature, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling wapiV3AccountStatusHtmlGet(Async)");
        }
        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling wapiV3AccountStatusHtmlGet(Async)");
        }
        
        com.squareup.okhttp.Call call = wapiV3AccountStatusHtmlGetCall(timestamp, signature, recvWindow, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Account Status (USER_DATA)
     * Fetch account status detail.  Weight: 1
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return InlineResponse20024
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20024 wapiV3AccountStatusHtmlGet(Integer timestamp, String signature, Integer recvWindow) throws ApiException {
        ApiResponse<InlineResponse20024> resp = wapiV3AccountStatusHtmlGetWithHttpInfo(timestamp, signature, recvWindow);
        return resp.getData();
    }

    /**
     * Account Status (USER_DATA)
     * Fetch account status detail.  Weight: 1
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return ApiResponse&lt;InlineResponse20024&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20024> wapiV3AccountStatusHtmlGetWithHttpInfo(Integer timestamp, String signature, Integer recvWindow) throws ApiException {
        com.squareup.okhttp.Call call = wapiV3AccountStatusHtmlGetValidateBeforeCall(timestamp, signature, recvWindow, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20024>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Account Status (USER_DATA) (asynchronously)
     * Fetch account status detail.  Weight: 1
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call wapiV3AccountStatusHtmlGetAsync(Integer timestamp, String signature, Integer recvWindow, final ApiCallback<InlineResponse20024> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = wapiV3AccountStatusHtmlGetValidateBeforeCall(timestamp, signature, recvWindow, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20024>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for wapiV3ApiTradingStatusHtmlGet
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call wapiV3ApiTradingStatusHtmlGetCall(Integer timestamp, String signature, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wapi/v3/apiTradingStatus.html";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (timestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timestamp", timestamp));
        if (recvWindow != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recvWindow", recvWindow));
        if (signature != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signature", signature));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call wapiV3ApiTradingStatusHtmlGetValidateBeforeCall(Integer timestamp, String signature, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling wapiV3ApiTradingStatusHtmlGet(Async)");
        }
        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling wapiV3ApiTradingStatusHtmlGet(Async)");
        }
        
        com.squareup.okhttp.Call call = wapiV3ApiTradingStatusHtmlGetCall(timestamp, signature, recvWindow, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Account API Trading Status (USER_DATA)
     * Fetch account api trading status detail.  Weight: 1
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return InlineResponse20025
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20025 wapiV3ApiTradingStatusHtmlGet(Integer timestamp, String signature, Integer recvWindow) throws ApiException {
        ApiResponse<InlineResponse20025> resp = wapiV3ApiTradingStatusHtmlGetWithHttpInfo(timestamp, signature, recvWindow);
        return resp.getData();
    }

    /**
     * Account API Trading Status (USER_DATA)
     * Fetch account api trading status detail.  Weight: 1
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return ApiResponse&lt;InlineResponse20025&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20025> wapiV3ApiTradingStatusHtmlGetWithHttpInfo(Integer timestamp, String signature, Integer recvWindow) throws ApiException {
        com.squareup.okhttp.Call call = wapiV3ApiTradingStatusHtmlGetValidateBeforeCall(timestamp, signature, recvWindow, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20025>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Account API Trading Status (USER_DATA) (asynchronously)
     * Fetch account api trading status detail.  Weight: 1
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call wapiV3ApiTradingStatusHtmlGetAsync(Integer timestamp, String signature, Integer recvWindow, final ApiCallback<InlineResponse20025> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = wapiV3ApiTradingStatusHtmlGetValidateBeforeCall(timestamp, signature, recvWindow, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20025>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for wapiV3AssetDetailHtmlGet
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call wapiV3AssetDetailHtmlGetCall(Integer timestamp, String signature, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wapi/v3/assetDetail.html";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (timestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timestamp", timestamp));
        if (recvWindow != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recvWindow", recvWindow));
        if (signature != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signature", signature));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call wapiV3AssetDetailHtmlGetValidateBeforeCall(Integer timestamp, String signature, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling wapiV3AssetDetailHtmlGet(Async)");
        }
        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling wapiV3AssetDetailHtmlGet(Async)");
        }
        
        com.squareup.okhttp.Call call = wapiV3AssetDetailHtmlGetCall(timestamp, signature, recvWindow, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Asset Detail (USER_DATA)
     * Fetch details of assets supported on Binance.  Please get network and other deposit or withdraw details from &#x60;GET /sapi/v1/capital/config/getall&#x60;.  Weight: 1
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return InlineResponse20029
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20029 wapiV3AssetDetailHtmlGet(Integer timestamp, String signature, Integer recvWindow) throws ApiException {
        ApiResponse<InlineResponse20029> resp = wapiV3AssetDetailHtmlGetWithHttpInfo(timestamp, signature, recvWindow);
        return resp.getData();
    }

    /**
     * Asset Detail (USER_DATA)
     * Fetch details of assets supported on Binance.  Please get network and other deposit or withdraw details from &#x60;GET /sapi/v1/capital/config/getall&#x60;.  Weight: 1
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return ApiResponse&lt;InlineResponse20029&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20029> wapiV3AssetDetailHtmlGetWithHttpInfo(Integer timestamp, String signature, Integer recvWindow) throws ApiException {
        com.squareup.okhttp.Call call = wapiV3AssetDetailHtmlGetValidateBeforeCall(timestamp, signature, recvWindow, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20029>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Asset Detail (USER_DATA) (asynchronously)
     * Fetch details of assets supported on Binance.  Please get network and other deposit or withdraw details from &#x60;GET /sapi/v1/capital/config/getall&#x60;.  Weight: 1
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call wapiV3AssetDetailHtmlGetAsync(Integer timestamp, String signature, Integer recvWindow, final ApiCallback<InlineResponse20029> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = wapiV3AssetDetailHtmlGetValidateBeforeCall(timestamp, signature, recvWindow, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20029>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for wapiV3SystemStatusHtmlGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call wapiV3SystemStatusHtmlGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wapi/v3/systemStatus.html";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call wapiV3SystemStatusHtmlGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = wapiV3SystemStatusHtmlGetCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * System Status (System)
     * Weight: 1
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object wapiV3SystemStatusHtmlGet() throws ApiException {
        ApiResponse<Object> resp = wapiV3SystemStatusHtmlGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * System Status (System)
     * Weight: 1
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> wapiV3SystemStatusHtmlGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = wapiV3SystemStatusHtmlGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * System Status (System) (asynchronously)
     * Weight: 1
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call wapiV3SystemStatusHtmlGetAsync(final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = wapiV3SystemStatusHtmlGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for wapiV3TradeFeeHtmlGet
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param symbol trading symbol, e.g. BNBUSDT (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call wapiV3TradeFeeHtmlGetCall(Integer timestamp, String signature, String symbol, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wapi/v3/tradeFee.html";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (symbol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("symbol", symbol));
        if (timestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timestamp", timestamp));
        if (recvWindow != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recvWindow", recvWindow));
        if (signature != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signature", signature));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call wapiV3TradeFeeHtmlGetValidateBeforeCall(Integer timestamp, String signature, String symbol, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling wapiV3TradeFeeHtmlGet(Async)");
        }
        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling wapiV3TradeFeeHtmlGet(Async)");
        }
        
        com.squareup.okhttp.Call call = wapiV3TradeFeeHtmlGetCall(timestamp, signature, symbol, recvWindow, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Trade Fee (USER_DATA)
     * Fetch trade fee, values in percentage.  Weight: 1
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param symbol trading symbol, e.g. BNBUSDT (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return InlineResponse20030
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20030 wapiV3TradeFeeHtmlGet(Integer timestamp, String signature, String symbol, Integer recvWindow) throws ApiException {
        ApiResponse<InlineResponse20030> resp = wapiV3TradeFeeHtmlGetWithHttpInfo(timestamp, signature, symbol, recvWindow);
        return resp.getData();
    }

    /**
     * Trade Fee (USER_DATA)
     * Fetch trade fee, values in percentage.  Weight: 1
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param symbol trading symbol, e.g. BNBUSDT (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return ApiResponse&lt;InlineResponse20030&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20030> wapiV3TradeFeeHtmlGetWithHttpInfo(Integer timestamp, String signature, String symbol, Integer recvWindow) throws ApiException {
        com.squareup.okhttp.Call call = wapiV3TradeFeeHtmlGetValidateBeforeCall(timestamp, signature, symbol, recvWindow, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20030>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Trade Fee (USER_DATA) (asynchronously)
     * Fetch trade fee, values in percentage.  Weight: 1
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param symbol trading symbol, e.g. BNBUSDT (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call wapiV3TradeFeeHtmlGetAsync(Integer timestamp, String signature, String symbol, Integer recvWindow, final ApiCallback<InlineResponse20030> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = wapiV3TradeFeeHtmlGetValidateBeforeCall(timestamp, signature, symbol, recvWindow, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20030>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for wapiV3UserAssetDribbletLogHtmlGet
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call wapiV3UserAssetDribbletLogHtmlGetCall(Integer timestamp, String signature, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wapi/v3/userAssetDribbletLog.html";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (timestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timestamp", timestamp));
        if (recvWindow != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recvWindow", recvWindow));
        if (signature != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signature", signature));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call wapiV3UserAssetDribbletLogHtmlGetValidateBeforeCall(Integer timestamp, String signature, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling wapiV3UserAssetDribbletLogHtmlGet(Async)");
        }
        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling wapiV3UserAssetDribbletLogHtmlGet(Async)");
        }
        
        com.squareup.okhttp.Call call = wapiV3UserAssetDribbletLogHtmlGetCall(timestamp, signature, recvWindow, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * DustLog (USER_DATA)
     * Fetch small amounts of assets exchanged BNB records.  Weight: 1
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return InlineResponse20026
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20026 wapiV3UserAssetDribbletLogHtmlGet(Integer timestamp, String signature, Integer recvWindow) throws ApiException {
        ApiResponse<InlineResponse20026> resp = wapiV3UserAssetDribbletLogHtmlGetWithHttpInfo(timestamp, signature, recvWindow);
        return resp.getData();
    }

    /**
     * DustLog (USER_DATA)
     * Fetch small amounts of assets exchanged BNB records.  Weight: 1
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return ApiResponse&lt;InlineResponse20026&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20026> wapiV3UserAssetDribbletLogHtmlGetWithHttpInfo(Integer timestamp, String signature, Integer recvWindow) throws ApiException {
        com.squareup.okhttp.Call call = wapiV3UserAssetDribbletLogHtmlGetValidateBeforeCall(timestamp, signature, recvWindow, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20026>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * DustLog (USER_DATA) (asynchronously)
     * Fetch small amounts of assets exchanged BNB records.  Weight: 1
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call wapiV3UserAssetDribbletLogHtmlGetAsync(Integer timestamp, String signature, Integer recvWindow, final ApiCallback<InlineResponse20026> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = wapiV3UserAssetDribbletLogHtmlGetValidateBeforeCall(timestamp, signature, recvWindow, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20026>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
