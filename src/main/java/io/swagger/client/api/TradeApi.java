/*
 * Binance SPOT Public API
 * The swagger file of Binance Public API  API documents:   - [https://github.com/binance-exchange/binance-official-api-docs](https://github.com/binance-exchange/binance-official-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Account;
import io.swagger.client.model.Error;
import io.swagger.client.model.InlineResponse2007;
import io.swagger.client.model.InlineResponse2008;
import io.swagger.client.model.MyTrade;
import io.swagger.client.model.OCOOrder;
import io.swagger.client.model.Order;
import io.swagger.client.model.OrderDetails;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TradeApi {
    private ApiClient apiClient;

    public TradeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TradeApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for apiV3AccountGet
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV3AccountGetCall(Integer timestamp, String signature, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/account";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (recvWindow != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recvWindow", recvWindow));
        if (timestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timestamp", timestamp));
        if (signature != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signature", signature));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV3AccountGetValidateBeforeCall(Integer timestamp, String signature, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling apiV3AccountGet(Async)");
        }
        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling apiV3AccountGet(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV3AccountGetCall(timestamp, signature, recvWindow, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Account Information (USER_DATA)
     * Get current account information.  Weight: 5
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return Account
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Account apiV3AccountGet(Integer timestamp, String signature, Integer recvWindow) throws ApiException {
        ApiResponse<Account> resp = apiV3AccountGetWithHttpInfo(timestamp, signature, recvWindow);
        return resp.getData();
    }

    /**
     * Account Information (USER_DATA)
     * Get current account information.  Weight: 5
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return ApiResponse&lt;Account&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Account> apiV3AccountGetWithHttpInfo(Integer timestamp, String signature, Integer recvWindow) throws ApiException {
        com.squareup.okhttp.Call call = apiV3AccountGetValidateBeforeCall(timestamp, signature, recvWindow, null, null);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Account Information (USER_DATA) (asynchronously)
     * Get current account information.  Weight: 5
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV3AccountGetAsync(Integer timestamp, String signature, Integer recvWindow, final ApiCallback<Account> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV3AccountGetValidateBeforeCall(timestamp, signature, recvWindow, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV3AllOrderListGet
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param fromId Trade id to fetch from. Default gets most recent trades. (optional)
     * @param startTime Timestamp in ms (optional)
     * @param endTime Timestamp in ms (optional)
     * @param limit Default 500; max 1000. (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV3AllOrderListGetCall(Integer timestamp, String signature, Integer fromId, Integer startTime, Integer endTime, Integer limit, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/allOrderList";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fromId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fromId", fromId));
        if (startTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startTime", startTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endTime", endTime));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (recvWindow != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recvWindow", recvWindow));
        if (timestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timestamp", timestamp));
        if (signature != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signature", signature));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV3AllOrderListGetValidateBeforeCall(Integer timestamp, String signature, Integer fromId, Integer startTime, Integer endTime, Integer limit, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling apiV3AllOrderListGet(Async)");
        }
        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling apiV3AllOrderListGet(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV3AllOrderListGetCall(timestamp, signature, fromId, startTime, endTime, limit, recvWindow, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Query all OCO (USER_DATA)
     * Retrieves all OCO based on provided optional parameters  Weight: 10
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param fromId Trade id to fetch from. Default gets most recent trades. (optional)
     * @param startTime Timestamp in ms (optional)
     * @param endTime Timestamp in ms (optional)
     * @param limit Default 500; max 1000. (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return List&lt;OCOOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<OCOOrder> apiV3AllOrderListGet(Integer timestamp, String signature, Integer fromId, Integer startTime, Integer endTime, Integer limit, Integer recvWindow) throws ApiException {
        ApiResponse<List<OCOOrder>> resp = apiV3AllOrderListGetWithHttpInfo(timestamp, signature, fromId, startTime, endTime, limit, recvWindow);
        return resp.getData();
    }

    /**
     * Query all OCO (USER_DATA)
     * Retrieves all OCO based on provided optional parameters  Weight: 10
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param fromId Trade id to fetch from. Default gets most recent trades. (optional)
     * @param startTime Timestamp in ms (optional)
     * @param endTime Timestamp in ms (optional)
     * @param limit Default 500; max 1000. (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return ApiResponse&lt;List&lt;OCOOrder&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<OCOOrder>> apiV3AllOrderListGetWithHttpInfo(Integer timestamp, String signature, Integer fromId, Integer startTime, Integer endTime, Integer limit, Integer recvWindow) throws ApiException {
        com.squareup.okhttp.Call call = apiV3AllOrderListGetValidateBeforeCall(timestamp, signature, fromId, startTime, endTime, limit, recvWindow, null, null);
        Type localVarReturnType = new TypeToken<List<OCOOrder>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query all OCO (USER_DATA) (asynchronously)
     * Retrieves all OCO based on provided optional parameters  Weight: 10
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param fromId Trade id to fetch from. Default gets most recent trades. (optional)
     * @param startTime Timestamp in ms (optional)
     * @param endTime Timestamp in ms (optional)
     * @param limit Default 500; max 1000. (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV3AllOrderListGetAsync(Integer timestamp, String signature, Integer fromId, Integer startTime, Integer endTime, Integer limit, Integer recvWindow, final ApiCallback<List<OCOOrder>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV3AllOrderListGetValidateBeforeCall(timestamp, signature, fromId, startTime, endTime, limit, recvWindow, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<OCOOrder>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV3AllOrdersGet
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param orderId order id (optional)
     * @param startTime Timestamp in ms (optional)
     * @param endTime Timestamp in ms (optional)
     * @param limit Default 500; max 1000. (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV3AllOrdersGetCall(String symbol, Integer timestamp, String signature, Integer orderId, Integer startTime, Integer endTime, Integer limit, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/allOrders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (symbol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("symbol", symbol));
        if (orderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderId", orderId));
        if (startTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startTime", startTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endTime", endTime));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (recvWindow != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recvWindow", recvWindow));
        if (timestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timestamp", timestamp));
        if (signature != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signature", signature));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV3AllOrdersGetValidateBeforeCall(String symbol, Integer timestamp, String signature, Integer orderId, Integer startTime, Integer endTime, Integer limit, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling apiV3AllOrdersGet(Async)");
        }
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling apiV3AllOrdersGet(Async)");
        }
        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling apiV3AllOrdersGet(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV3AllOrdersGetCall(symbol, timestamp, signature, orderId, startTime, endTime, limit, recvWindow, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * All Orders (USER_DATA)
     * Get all account orders; active, canceled, or filled..  - If orderId is set, it will get orders &gt;&#x3D; that orderId. Otherwise most recent orders are returned. - For some historical orders cummulativeQuoteQty will be &lt; 0, meaning the data is not available at this time.  Weight: 5
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param orderId order id (optional)
     * @param startTime Timestamp in ms (optional)
     * @param endTime Timestamp in ms (optional)
     * @param limit Default 500; max 1000. (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return List&lt;OrderDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<OrderDetails> apiV3AllOrdersGet(String symbol, Integer timestamp, String signature, Integer orderId, Integer startTime, Integer endTime, Integer limit, Integer recvWindow) throws ApiException {
        ApiResponse<List<OrderDetails>> resp = apiV3AllOrdersGetWithHttpInfo(symbol, timestamp, signature, orderId, startTime, endTime, limit, recvWindow);
        return resp.getData();
    }

    /**
     * All Orders (USER_DATA)
     * Get all account orders; active, canceled, or filled..  - If orderId is set, it will get orders &gt;&#x3D; that orderId. Otherwise most recent orders are returned. - For some historical orders cummulativeQuoteQty will be &lt; 0, meaning the data is not available at this time.  Weight: 5
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param orderId order id (optional)
     * @param startTime Timestamp in ms (optional)
     * @param endTime Timestamp in ms (optional)
     * @param limit Default 500; max 1000. (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return ApiResponse&lt;List&lt;OrderDetails&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<OrderDetails>> apiV3AllOrdersGetWithHttpInfo(String symbol, Integer timestamp, String signature, Integer orderId, Integer startTime, Integer endTime, Integer limit, Integer recvWindow) throws ApiException {
        com.squareup.okhttp.Call call = apiV3AllOrdersGetValidateBeforeCall(symbol, timestamp, signature, orderId, startTime, endTime, limit, recvWindow, null, null);
        Type localVarReturnType = new TypeToken<List<OrderDetails>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * All Orders (USER_DATA) (asynchronously)
     * Get all account orders; active, canceled, or filled..  - If orderId is set, it will get orders &gt;&#x3D; that orderId. Otherwise most recent orders are returned. - For some historical orders cummulativeQuoteQty will be &lt; 0, meaning the data is not available at this time.  Weight: 5
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param orderId order id (optional)
     * @param startTime Timestamp in ms (optional)
     * @param endTime Timestamp in ms (optional)
     * @param limit Default 500; max 1000. (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV3AllOrdersGetAsync(String symbol, Integer timestamp, String signature, Integer orderId, Integer startTime, Integer endTime, Integer limit, Integer recvWindow, final ApiCallback<List<OrderDetails>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV3AllOrdersGetValidateBeforeCall(symbol, timestamp, signature, orderId, startTime, endTime, limit, recvWindow, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<OrderDetails>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV3MyTradesGet
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param startTime Timestamp in ms (optional)
     * @param endTime Timestamp in ms (optional)
     * @param fromId Trade id to fetch from. Default gets most recent trades. (optional)
     * @param limit Default 500; max 1000. (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV3MyTradesGetCall(String symbol, Integer timestamp, String signature, Integer startTime, Integer endTime, Integer fromId, Integer limit, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/myTrades";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (symbol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("symbol", symbol));
        if (startTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startTime", startTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endTime", endTime));
        if (fromId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fromId", fromId));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (recvWindow != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recvWindow", recvWindow));
        if (timestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timestamp", timestamp));
        if (signature != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signature", signature));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV3MyTradesGetValidateBeforeCall(String symbol, Integer timestamp, String signature, Integer startTime, Integer endTime, Integer fromId, Integer limit, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling apiV3MyTradesGet(Async)");
        }
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling apiV3MyTradesGet(Async)");
        }
        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling apiV3MyTradesGet(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV3MyTradesGetCall(symbol, timestamp, signature, startTime, endTime, fromId, limit, recvWindow, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Account Trade List (USER_DATA)
     * Get trades for a specific account and symbol.  If fromId is set, it will get id &gt;&#x3D; that fromId. Otherwise most recent orders are returned.  Weight: 5
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param startTime Timestamp in ms (optional)
     * @param endTime Timestamp in ms (optional)
     * @param fromId Trade id to fetch from. Default gets most recent trades. (optional)
     * @param limit Default 500; max 1000. (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return MyTrade
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MyTrade apiV3MyTradesGet(String symbol, Integer timestamp, String signature, Integer startTime, Integer endTime, Integer fromId, Integer limit, Integer recvWindow) throws ApiException {
        ApiResponse<MyTrade> resp = apiV3MyTradesGetWithHttpInfo(symbol, timestamp, signature, startTime, endTime, fromId, limit, recvWindow);
        return resp.getData();
    }

    /**
     * Account Trade List (USER_DATA)
     * Get trades for a specific account and symbol.  If fromId is set, it will get id &gt;&#x3D; that fromId. Otherwise most recent orders are returned.  Weight: 5
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param startTime Timestamp in ms (optional)
     * @param endTime Timestamp in ms (optional)
     * @param fromId Trade id to fetch from. Default gets most recent trades. (optional)
     * @param limit Default 500; max 1000. (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return ApiResponse&lt;MyTrade&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MyTrade> apiV3MyTradesGetWithHttpInfo(String symbol, Integer timestamp, String signature, Integer startTime, Integer endTime, Integer fromId, Integer limit, Integer recvWindow) throws ApiException {
        com.squareup.okhttp.Call call = apiV3MyTradesGetValidateBeforeCall(symbol, timestamp, signature, startTime, endTime, fromId, limit, recvWindow, null, null);
        Type localVarReturnType = new TypeToken<MyTrade>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Account Trade List (USER_DATA) (asynchronously)
     * Get trades for a specific account and symbol.  If fromId is set, it will get id &gt;&#x3D; that fromId. Otherwise most recent orders are returned.  Weight: 5
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param startTime Timestamp in ms (optional)
     * @param endTime Timestamp in ms (optional)
     * @param fromId Trade id to fetch from. Default gets most recent trades. (optional)
     * @param limit Default 500; max 1000. (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV3MyTradesGetAsync(String symbol, Integer timestamp, String signature, Integer startTime, Integer endTime, Integer fromId, Integer limit, Integer recvWindow, final ApiCallback<MyTrade> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV3MyTradesGetValidateBeforeCall(symbol, timestamp, signature, startTime, endTime, fromId, limit, recvWindow, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MyTrade>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV3OpenOrderListGet
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV3OpenOrderListGetCall(Integer timestamp, String signature, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/openOrderList";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (recvWindow != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recvWindow", recvWindow));
        if (timestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timestamp", timestamp));
        if (signature != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signature", signature));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV3OpenOrderListGetValidateBeforeCall(Integer timestamp, String signature, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling apiV3OpenOrderListGet(Async)");
        }
        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling apiV3OpenOrderListGet(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV3OpenOrderListGetCall(timestamp, signature, recvWindow, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Query Open OCO (USER_DATA)
     * Weight: 2
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return List&lt;OCOOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<OCOOrder> apiV3OpenOrderListGet(Integer timestamp, String signature, Integer recvWindow) throws ApiException {
        ApiResponse<List<OCOOrder>> resp = apiV3OpenOrderListGetWithHttpInfo(timestamp, signature, recvWindow);
        return resp.getData();
    }

    /**
     * Query Open OCO (USER_DATA)
     * Weight: 2
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return ApiResponse&lt;List&lt;OCOOrder&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<OCOOrder>> apiV3OpenOrderListGetWithHttpInfo(Integer timestamp, String signature, Integer recvWindow) throws ApiException {
        com.squareup.okhttp.Call call = apiV3OpenOrderListGetValidateBeforeCall(timestamp, signature, recvWindow, null, null);
        Type localVarReturnType = new TypeToken<List<OCOOrder>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query Open OCO (USER_DATA) (asynchronously)
     * Weight: 2
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV3OpenOrderListGetAsync(Integer timestamp, String signature, Integer recvWindow, final ApiCallback<List<OCOOrder>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV3OpenOrderListGetValidateBeforeCall(timestamp, signature, recvWindow, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<OCOOrder>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV3OpenOrdersDelete
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV3OpenOrdersDeleteCall(String symbol, Integer timestamp, String signature, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/openOrders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (symbol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("symbol", symbol));
        if (recvWindow != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recvWindow", recvWindow));
        if (timestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timestamp", timestamp));
        if (signature != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signature", signature));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV3OpenOrdersDeleteValidateBeforeCall(String symbol, Integer timestamp, String signature, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling apiV3OpenOrdersDelete(Async)");
        }
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling apiV3OpenOrdersDelete(Async)");
        }
        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling apiV3OpenOrdersDelete(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV3OpenOrdersDeleteCall(symbol, timestamp, signature, recvWindow, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Cancel all Open Orders on a Symbol (TRADE)
     * Cancels all active orders on a symbol.\\ This includes OCO orders.  Weight: 1 
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return List&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Order> apiV3OpenOrdersDelete(String symbol, Integer timestamp, String signature, Integer recvWindow) throws ApiException {
        ApiResponse<List<Order>> resp = apiV3OpenOrdersDeleteWithHttpInfo(symbol, timestamp, signature, recvWindow);
        return resp.getData();
    }

    /**
     * Cancel all Open Orders on a Symbol (TRADE)
     * Cancels all active orders on a symbol.\\ This includes OCO orders.  Weight: 1 
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return ApiResponse&lt;List&lt;Order&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Order>> apiV3OpenOrdersDeleteWithHttpInfo(String symbol, Integer timestamp, String signature, Integer recvWindow) throws ApiException {
        com.squareup.okhttp.Call call = apiV3OpenOrdersDeleteValidateBeforeCall(symbol, timestamp, signature, recvWindow, null, null);
        Type localVarReturnType = new TypeToken<List<Order>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancel all Open Orders on a Symbol (TRADE) (asynchronously)
     * Cancels all active orders on a symbol.\\ This includes OCO orders.  Weight: 1 
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV3OpenOrdersDeleteAsync(String symbol, Integer timestamp, String signature, Integer recvWindow, final ApiCallback<List<Order>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV3OpenOrdersDeleteValidateBeforeCall(symbol, timestamp, signature, recvWindow, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Order>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV3OpenOrdersGet
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param symbol trading symbol, e.g. BNBUSDT (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV3OpenOrdersGetCall(Integer timestamp, String signature, String symbol, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/openOrders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (symbol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("symbol", symbol));
        if (recvWindow != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recvWindow", recvWindow));
        if (timestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timestamp", timestamp));
        if (signature != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signature", signature));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV3OpenOrdersGetValidateBeforeCall(Integer timestamp, String signature, String symbol, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling apiV3OpenOrdersGet(Async)");
        }
        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling apiV3OpenOrdersGet(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV3OpenOrdersGetCall(timestamp, signature, symbol, recvWindow, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Current Open Orders (USER_DATA)
     * Get all open orders on a symbol. Careful when accessing this with no symbol.\\  Weight:\\ &#x60;1&#x60; for a single symbol;\\ &#x60;40&#x60; when the symbol parameter is omitted
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param symbol trading symbol, e.g. BNBUSDT (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return List&lt;OrderDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<OrderDetails> apiV3OpenOrdersGet(Integer timestamp, String signature, String symbol, Integer recvWindow) throws ApiException {
        ApiResponse<List<OrderDetails>> resp = apiV3OpenOrdersGetWithHttpInfo(timestamp, signature, symbol, recvWindow);
        return resp.getData();
    }

    /**
     * Current Open Orders (USER_DATA)
     * Get all open orders on a symbol. Careful when accessing this with no symbol.\\  Weight:\\ &#x60;1&#x60; for a single symbol;\\ &#x60;40&#x60; when the symbol parameter is omitted
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param symbol trading symbol, e.g. BNBUSDT (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return ApiResponse&lt;List&lt;OrderDetails&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<OrderDetails>> apiV3OpenOrdersGetWithHttpInfo(Integer timestamp, String signature, String symbol, Integer recvWindow) throws ApiException {
        com.squareup.okhttp.Call call = apiV3OpenOrdersGetValidateBeforeCall(timestamp, signature, symbol, recvWindow, null, null);
        Type localVarReturnType = new TypeToken<List<OrderDetails>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Current Open Orders (USER_DATA) (asynchronously)
     * Get all open orders on a symbol. Careful when accessing this with no symbol.\\  Weight:\\ &#x60;1&#x60; for a single symbol;\\ &#x60;40&#x60; when the symbol parameter is omitted
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param symbol trading symbol, e.g. BNBUSDT (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV3OpenOrdersGetAsync(Integer timestamp, String signature, String symbol, Integer recvWindow, final ApiCallback<List<OrderDetails>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV3OpenOrdersGetValidateBeforeCall(timestamp, signature, symbol, recvWindow, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<OrderDetails>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV3OrderDelete
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param orderId order id (optional)
     * @param origClientOrderId order id from client (optional)
     * @param newClientOrderId Used to uniquely identify this cancel. Automatically generated by default (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV3OrderDeleteCall(String symbol, Integer timestamp, String signature, Integer orderId, String origClientOrderId, String newClientOrderId, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/order";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (symbol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("symbol", symbol));
        if (orderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderId", orderId));
        if (origClientOrderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("origClientOrderId", origClientOrderId));
        if (newClientOrderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("newClientOrderId", newClientOrderId));
        if (recvWindow != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recvWindow", recvWindow));
        if (timestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timestamp", timestamp));
        if (signature != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signature", signature));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV3OrderDeleteValidateBeforeCall(String symbol, Integer timestamp, String signature, Integer orderId, String origClientOrderId, String newClientOrderId, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling apiV3OrderDelete(Async)");
        }
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling apiV3OrderDelete(Async)");
        }
        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling apiV3OrderDelete(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV3OrderDeleteCall(symbol, timestamp, signature, orderId, origClientOrderId, newClientOrderId, recvWindow, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Cancel Order (TRADE)
     * Cancel an active order.  Either &#x60;orderId&#x60; or &#x60;origClientOrderId&#x60; must be sent.  Weight: 1 
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param orderId order id (optional)
     * @param origClientOrderId order id from client (optional)
     * @param newClientOrderId Used to uniquely identify this cancel. Automatically generated by default (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Order apiV3OrderDelete(String symbol, Integer timestamp, String signature, Integer orderId, String origClientOrderId, String newClientOrderId, Integer recvWindow) throws ApiException {
        ApiResponse<Order> resp = apiV3OrderDeleteWithHttpInfo(symbol, timestamp, signature, orderId, origClientOrderId, newClientOrderId, recvWindow);
        return resp.getData();
    }

    /**
     * Cancel Order (TRADE)
     * Cancel an active order.  Either &#x60;orderId&#x60; or &#x60;origClientOrderId&#x60; must be sent.  Weight: 1 
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param orderId order id (optional)
     * @param origClientOrderId order id from client (optional)
     * @param newClientOrderId Used to uniquely identify this cancel. Automatically generated by default (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Order> apiV3OrderDeleteWithHttpInfo(String symbol, Integer timestamp, String signature, Integer orderId, String origClientOrderId, String newClientOrderId, Integer recvWindow) throws ApiException {
        com.squareup.okhttp.Call call = apiV3OrderDeleteValidateBeforeCall(symbol, timestamp, signature, orderId, origClientOrderId, newClientOrderId, recvWindow, null, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancel Order (TRADE) (asynchronously)
     * Cancel an active order.  Either &#x60;orderId&#x60; or &#x60;origClientOrderId&#x60; must be sent.  Weight: 1 
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param orderId order id (optional)
     * @param origClientOrderId order id from client (optional)
     * @param newClientOrderId Used to uniquely identify this cancel. Automatically generated by default (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV3OrderDeleteAsync(String symbol, Integer timestamp, String signature, Integer orderId, String origClientOrderId, String newClientOrderId, Integer recvWindow, final ApiCallback<Order> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV3OrderDeleteValidateBeforeCall(symbol, timestamp, signature, orderId, origClientOrderId, newClientOrderId, recvWindow, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV3OrderGet
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param orderId order id (optional)
     * @param origClientOrderId order id from client (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV3OrderGetCall(String symbol, Integer timestamp, String signature, Integer orderId, String origClientOrderId, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/order";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (symbol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("symbol", symbol));
        if (orderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderId", orderId));
        if (origClientOrderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("origClientOrderId", origClientOrderId));
        if (recvWindow != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recvWindow", recvWindow));
        if (timestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timestamp", timestamp));
        if (signature != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signature", signature));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV3OrderGetValidateBeforeCall(String symbol, Integer timestamp, String signature, Integer orderId, String origClientOrderId, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling apiV3OrderGet(Async)");
        }
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling apiV3OrderGet(Async)");
        }
        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling apiV3OrderGet(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV3OrderGetCall(symbol, timestamp, signature, orderId, origClientOrderId, recvWindow, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Query Order (USER_DATA)
     * Check an order&#x27;s status.  - Either &#x60;orderId&#x60; or &#x60;origClientOrderId&#x60; must be sent. - For some historical orders &#x60;cummulativeQuoteQty&#x60; will be &lt; 0, meaning the data is not available at this time.  Weight: 1 
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param orderId order id (optional)
     * @param origClientOrderId order id from client (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return OrderDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrderDetails apiV3OrderGet(String symbol, Integer timestamp, String signature, Integer orderId, String origClientOrderId, Integer recvWindow) throws ApiException {
        ApiResponse<OrderDetails> resp = apiV3OrderGetWithHttpInfo(symbol, timestamp, signature, orderId, origClientOrderId, recvWindow);
        return resp.getData();
    }

    /**
     * Query Order (USER_DATA)
     * Check an order&#x27;s status.  - Either &#x60;orderId&#x60; or &#x60;origClientOrderId&#x60; must be sent. - For some historical orders &#x60;cummulativeQuoteQty&#x60; will be &lt; 0, meaning the data is not available at this time.  Weight: 1 
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param orderId order id (optional)
     * @param origClientOrderId order id from client (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return ApiResponse&lt;OrderDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrderDetails> apiV3OrderGetWithHttpInfo(String symbol, Integer timestamp, String signature, Integer orderId, String origClientOrderId, Integer recvWindow) throws ApiException {
        com.squareup.okhttp.Call call = apiV3OrderGetValidateBeforeCall(symbol, timestamp, signature, orderId, origClientOrderId, recvWindow, null, null);
        Type localVarReturnType = new TypeToken<OrderDetails>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query Order (USER_DATA) (asynchronously)
     * Check an order&#x27;s status.  - Either &#x60;orderId&#x60; or &#x60;origClientOrderId&#x60; must be sent. - For some historical orders &#x60;cummulativeQuoteQty&#x60; will be &lt; 0, meaning the data is not available at this time.  Weight: 1 
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param orderId order id (optional)
     * @param origClientOrderId order id from client (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV3OrderGetAsync(String symbol, Integer timestamp, String signature, Integer orderId, String origClientOrderId, Integer recvWindow, final ApiCallback<OrderDetails> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV3OrderGetValidateBeforeCall(symbol, timestamp, signature, orderId, origClientOrderId, recvWindow, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderDetails>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV3OrderListDelete
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param orderListId order list id (optional)
     * @param listClientOrderId A unique Id for the entire orderList (optional)
     * @param newClientOrderId Used to uniquely identify this cancel. Automatically generated by default (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV3OrderListDeleteCall(String symbol, Integer timestamp, String signature, Integer orderListId, String listClientOrderId, String newClientOrderId, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/orderList";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (symbol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("symbol", symbol));
        if (orderListId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderListId", orderListId));
        if (listClientOrderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("listClientOrderId", listClientOrderId));
        if (newClientOrderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("newClientOrderId", newClientOrderId));
        if (recvWindow != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recvWindow", recvWindow));
        if (timestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timestamp", timestamp));
        if (signature != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signature", signature));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV3OrderListDeleteValidateBeforeCall(String symbol, Integer timestamp, String signature, Integer orderListId, String listClientOrderId, String newClientOrderId, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling apiV3OrderListDelete(Async)");
        }
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling apiV3OrderListDelete(Async)");
        }
        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling apiV3OrderListDelete(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV3OrderListDeleteCall(symbol, timestamp, signature, orderListId, listClientOrderId, newClientOrderId, recvWindow, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Cancel OCO (TRADE)
     * Cancel an entire Order List  Canceling an individual leg will cancel the entire OCO  Weight: 1 
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param orderListId order list id (optional)
     * @param listClientOrderId A unique Id for the entire orderList (optional)
     * @param newClientOrderId Used to uniquely identify this cancel. Automatically generated by default (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object apiV3OrderListDelete(String symbol, Integer timestamp, String signature, Integer orderListId, String listClientOrderId, String newClientOrderId, Integer recvWindow) throws ApiException {
        ApiResponse<Object> resp = apiV3OrderListDeleteWithHttpInfo(symbol, timestamp, signature, orderListId, listClientOrderId, newClientOrderId, recvWindow);
        return resp.getData();
    }

    /**
     * Cancel OCO (TRADE)
     * Cancel an entire Order List  Canceling an individual leg will cancel the entire OCO  Weight: 1 
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param orderListId order list id (optional)
     * @param listClientOrderId A unique Id for the entire orderList (optional)
     * @param newClientOrderId Used to uniquely identify this cancel. Automatically generated by default (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> apiV3OrderListDeleteWithHttpInfo(String symbol, Integer timestamp, String signature, Integer orderListId, String listClientOrderId, String newClientOrderId, Integer recvWindow) throws ApiException {
        com.squareup.okhttp.Call call = apiV3OrderListDeleteValidateBeforeCall(symbol, timestamp, signature, orderListId, listClientOrderId, newClientOrderId, recvWindow, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancel OCO (TRADE) (asynchronously)
     * Cancel an entire Order List  Canceling an individual leg will cancel the entire OCO  Weight: 1 
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param orderListId order list id (optional)
     * @param listClientOrderId A unique Id for the entire orderList (optional)
     * @param newClientOrderId Used to uniquely identify this cancel. Automatically generated by default (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV3OrderListDeleteAsync(String symbol, Integer timestamp, String signature, Integer orderListId, String listClientOrderId, String newClientOrderId, Integer recvWindow, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV3OrderListDeleteValidateBeforeCall(symbol, timestamp, signature, orderListId, listClientOrderId, newClientOrderId, recvWindow, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV3OrderListGet
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param orderListId order list id (optional)
     * @param origClientOrderId order id from client (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV3OrderListGetCall(Integer timestamp, String signature, Integer orderListId, String origClientOrderId, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/orderList";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (orderListId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderListId", orderListId));
        if (origClientOrderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("origClientOrderId", origClientOrderId));
        if (recvWindow != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recvWindow", recvWindow));
        if (timestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timestamp", timestamp));
        if (signature != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signature", signature));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV3OrderListGetValidateBeforeCall(Integer timestamp, String signature, Integer orderListId, String origClientOrderId, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling apiV3OrderListGet(Async)");
        }
        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling apiV3OrderListGet(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV3OrderListGetCall(timestamp, signature, orderListId, origClientOrderId, recvWindow, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Query OCO (USER_DATA)
     * Retrieves a specific OCO based on provided optional parameters  Weight: 1
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param orderListId order list id (optional)
     * @param origClientOrderId order id from client (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return OCOOrder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OCOOrder apiV3OrderListGet(Integer timestamp, String signature, Integer orderListId, String origClientOrderId, Integer recvWindow) throws ApiException {
        ApiResponse<OCOOrder> resp = apiV3OrderListGetWithHttpInfo(timestamp, signature, orderListId, origClientOrderId, recvWindow);
        return resp.getData();
    }

    /**
     * Query OCO (USER_DATA)
     * Retrieves a specific OCO based on provided optional parameters  Weight: 1
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param orderListId order list id (optional)
     * @param origClientOrderId order id from client (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return ApiResponse&lt;OCOOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OCOOrder> apiV3OrderListGetWithHttpInfo(Integer timestamp, String signature, Integer orderListId, String origClientOrderId, Integer recvWindow) throws ApiException {
        com.squareup.okhttp.Call call = apiV3OrderListGetValidateBeforeCall(timestamp, signature, orderListId, origClientOrderId, recvWindow, null, null);
        Type localVarReturnType = new TypeToken<OCOOrder>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query OCO (USER_DATA) (asynchronously)
     * Retrieves a specific OCO based on provided optional parameters  Weight: 1
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param orderListId order list id (optional)
     * @param origClientOrderId order id from client (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV3OrderListGetAsync(Integer timestamp, String signature, Integer orderListId, String origClientOrderId, Integer recvWindow, final ApiCallback<OCOOrder> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV3OrderListGetValidateBeforeCall(timestamp, signature, orderListId, origClientOrderId, recvWindow, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OCOOrder>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV3OrderOcoPost
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param side SELL or BUY (required)
     * @param quantity order quantity (required)
     * @param price  (required)
     * @param stopPrice  (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param listClientOrderId A unique Id for the entire orderList (optional)
     * @param limitClientOrderId A unique Id for the limit order (optional)
     * @param limitIcebergQty  (optional)
     * @param stopClientOrderId  (optional)
     * @param stopLimitPrice  (optional)
     * @param stopIcebergQty  (optional)
     * @param stopLimitTimeInForce  (optional)
     * @param newOrderRespType Set the response JSON. ACK, RESULT, or FULL; MARKET and LIMIT order types default to FULL, all other orders default to ACK. (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV3OrderOcoPostCall(String symbol, String side, Float quantity, Float price, Float stopPrice, Integer timestamp, String signature, String listClientOrderId, Float limitClientOrderId, Float limitIcebergQty, String stopClientOrderId, Float stopLimitPrice, Float stopIcebergQty, String stopLimitTimeInForce, String newOrderRespType, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/order/oco";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (symbol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("symbol", symbol));
        if (listClientOrderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("listClientOrderId", listClientOrderId));
        if (side != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("side", side));
        if (quantity != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("quantity", quantity));
        if (limitClientOrderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limitClientOrderId", limitClientOrderId));
        if (price != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("price", price));
        if (limitIcebergQty != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limitIcebergQty", limitIcebergQty));
        if (stopClientOrderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("stopClientOrderId", stopClientOrderId));
        if (stopPrice != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("stopPrice", stopPrice));
        if (stopLimitPrice != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("stopLimitPrice", stopLimitPrice));
        if (stopIcebergQty != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("stopIcebergQty", stopIcebergQty));
        if (stopLimitTimeInForce != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("stopLimitTimeInForce", stopLimitTimeInForce));
        if (newOrderRespType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("newOrderRespType", newOrderRespType));
        if (recvWindow != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recvWindow", recvWindow));
        if (timestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timestamp", timestamp));
        if (signature != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signature", signature));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV3OrderOcoPostValidateBeforeCall(String symbol, String side, Float quantity, Float price, Float stopPrice, Integer timestamp, String signature, String listClientOrderId, Float limitClientOrderId, Float limitIcebergQty, String stopClientOrderId, Float stopLimitPrice, Float stopIcebergQty, String stopLimitTimeInForce, String newOrderRespType, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling apiV3OrderOcoPost(Async)");
        }
        // verify the required parameter 'side' is set
        if (side == null) {
            throw new ApiException("Missing the required parameter 'side' when calling apiV3OrderOcoPost(Async)");
        }
        // verify the required parameter 'quantity' is set
        if (quantity == null) {
            throw new ApiException("Missing the required parameter 'quantity' when calling apiV3OrderOcoPost(Async)");
        }
        // verify the required parameter 'price' is set
        if (price == null) {
            throw new ApiException("Missing the required parameter 'price' when calling apiV3OrderOcoPost(Async)");
        }
        // verify the required parameter 'stopPrice' is set
        if (stopPrice == null) {
            throw new ApiException("Missing the required parameter 'stopPrice' when calling apiV3OrderOcoPost(Async)");
        }
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling apiV3OrderOcoPost(Async)");
        }
        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling apiV3OrderOcoPost(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV3OrderOcoPostCall(symbol, side, quantity, price, stopPrice, timestamp, signature, listClientOrderId, limitClientOrderId, limitIcebergQty, stopClientOrderId, stopLimitPrice, stopIcebergQty, stopLimitTimeInForce, newOrderRespType, recvWindow, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * New OCO (TRADE)
     * Send in a new OCO  - Price Restrictions:   - SELL: Limit Price &gt; Last Price &gt; Stop Price   - BUY: Limit Price &lt; Last Price &lt; Stop Price - Quantity Restrictions:     - Both legs must have the same quantity     - ICEBERG quantities however do not have to be the same  Weight: 1
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param side SELL or BUY (required)
     * @param quantity order quantity (required)
     * @param price  (required)
     * @param stopPrice  (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param listClientOrderId A unique Id for the entire orderList (optional)
     * @param limitClientOrderId A unique Id for the limit order (optional)
     * @param limitIcebergQty  (optional)
     * @param stopClientOrderId  (optional)
     * @param stopLimitPrice  (optional)
     * @param stopIcebergQty  (optional)
     * @param stopLimitTimeInForce  (optional)
     * @param newOrderRespType Set the response JSON. ACK, RESULT, or FULL; MARKET and LIMIT order types default to FULL, all other orders default to ACK. (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return InlineResponse2008
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2008 apiV3OrderOcoPost(String symbol, String side, Float quantity, Float price, Float stopPrice, Integer timestamp, String signature, String listClientOrderId, Float limitClientOrderId, Float limitIcebergQty, String stopClientOrderId, Float stopLimitPrice, Float stopIcebergQty, String stopLimitTimeInForce, String newOrderRespType, Integer recvWindow) throws ApiException {
        ApiResponse<InlineResponse2008> resp = apiV3OrderOcoPostWithHttpInfo(symbol, side, quantity, price, stopPrice, timestamp, signature, listClientOrderId, limitClientOrderId, limitIcebergQty, stopClientOrderId, stopLimitPrice, stopIcebergQty, stopLimitTimeInForce, newOrderRespType, recvWindow);
        return resp.getData();
    }

    /**
     * New OCO (TRADE)
     * Send in a new OCO  - Price Restrictions:   - SELL: Limit Price &gt; Last Price &gt; Stop Price   - BUY: Limit Price &lt; Last Price &lt; Stop Price - Quantity Restrictions:     - Both legs must have the same quantity     - ICEBERG quantities however do not have to be the same  Weight: 1
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param side SELL or BUY (required)
     * @param quantity order quantity (required)
     * @param price  (required)
     * @param stopPrice  (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param listClientOrderId A unique Id for the entire orderList (optional)
     * @param limitClientOrderId A unique Id for the limit order (optional)
     * @param limitIcebergQty  (optional)
     * @param stopClientOrderId  (optional)
     * @param stopLimitPrice  (optional)
     * @param stopIcebergQty  (optional)
     * @param stopLimitTimeInForce  (optional)
     * @param newOrderRespType Set the response JSON. ACK, RESULT, or FULL; MARKET and LIMIT order types default to FULL, all other orders default to ACK. (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return ApiResponse&lt;InlineResponse2008&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2008> apiV3OrderOcoPostWithHttpInfo(String symbol, String side, Float quantity, Float price, Float stopPrice, Integer timestamp, String signature, String listClientOrderId, Float limitClientOrderId, Float limitIcebergQty, String stopClientOrderId, Float stopLimitPrice, Float stopIcebergQty, String stopLimitTimeInForce, String newOrderRespType, Integer recvWindow) throws ApiException {
        com.squareup.okhttp.Call call = apiV3OrderOcoPostValidateBeforeCall(symbol, side, quantity, price, stopPrice, timestamp, signature, listClientOrderId, limitClientOrderId, limitIcebergQty, stopClientOrderId, stopLimitPrice, stopIcebergQty, stopLimitTimeInForce, newOrderRespType, recvWindow, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2008>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * New OCO (TRADE) (asynchronously)
     * Send in a new OCO  - Price Restrictions:   - SELL: Limit Price &gt; Last Price &gt; Stop Price   - BUY: Limit Price &lt; Last Price &lt; Stop Price - Quantity Restrictions:     - Both legs must have the same quantity     - ICEBERG quantities however do not have to be the same  Weight: 1
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param side SELL or BUY (required)
     * @param quantity order quantity (required)
     * @param price  (required)
     * @param stopPrice  (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param listClientOrderId A unique Id for the entire orderList (optional)
     * @param limitClientOrderId A unique Id for the limit order (optional)
     * @param limitIcebergQty  (optional)
     * @param stopClientOrderId  (optional)
     * @param stopLimitPrice  (optional)
     * @param stopIcebergQty  (optional)
     * @param stopLimitTimeInForce  (optional)
     * @param newOrderRespType Set the response JSON. ACK, RESULT, or FULL; MARKET and LIMIT order types default to FULL, all other orders default to ACK. (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV3OrderOcoPostAsync(String symbol, String side, Float quantity, Float price, Float stopPrice, Integer timestamp, String signature, String listClientOrderId, Float limitClientOrderId, Float limitIcebergQty, String stopClientOrderId, Float stopLimitPrice, Float stopIcebergQty, String stopLimitTimeInForce, String newOrderRespType, Integer recvWindow, final ApiCallback<InlineResponse2008> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV3OrderOcoPostValidateBeforeCall(symbol, side, quantity, price, stopPrice, timestamp, signature, listClientOrderId, limitClientOrderId, limitIcebergQty, stopClientOrderId, stopLimitPrice, stopIcebergQty, stopLimitTimeInForce, newOrderRespType, recvWindow, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2008>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV3OrderPost
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param side SELL or BUY (required)
     * @param type the order type (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param timeInForce order time in force (optional)
     * @param quantity order quantity (optional)
     * @param quoteOrderQty quote quantity (optional)
     * @param price order price (optional)
     * @param newClientOrderId Used to uniquely identify this cancel. Automatically generated by default (optional)
     * @param stopPrice Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders. (optional)
     * @param icebergQty Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order. (optional)
     * @param newOrderRespType Set the response JSON. ACK, RESULT, or FULL; MARKET and LIMIT order types default to FULL, all other orders default to ACK. (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV3OrderPostCall(String symbol, String side, String type, Integer timestamp, String signature, String timeInForce, Float quantity, Float quoteOrderQty, Float price, String newClientOrderId, Float stopPrice, Float icebergQty, String newOrderRespType, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/order";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (symbol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("symbol", symbol));
        if (side != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("side", side));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (timeInForce != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timeInForce", timeInForce));
        if (quantity != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("quantity", quantity));
        if (quoteOrderQty != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("quoteOrderQty", quoteOrderQty));
        if (price != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("price", price));
        if (newClientOrderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("newClientOrderId", newClientOrderId));
        if (stopPrice != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("stopPrice", stopPrice));
        if (icebergQty != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("icebergQty", icebergQty));
        if (newOrderRespType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("newOrderRespType", newOrderRespType));
        if (recvWindow != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recvWindow", recvWindow));
        if (timestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timestamp", timestamp));
        if (signature != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signature", signature));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV3OrderPostValidateBeforeCall(String symbol, String side, String type, Integer timestamp, String signature, String timeInForce, Float quantity, Float quoteOrderQty, Float price, String newClientOrderId, Float stopPrice, Float icebergQty, String newOrderRespType, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling apiV3OrderPost(Async)");
        }
        // verify the required parameter 'side' is set
        if (side == null) {
            throw new ApiException("Missing the required parameter 'side' when calling apiV3OrderPost(Async)");
        }
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling apiV3OrderPost(Async)");
        }
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling apiV3OrderPost(Async)");
        }
        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling apiV3OrderPost(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV3OrderPostCall(symbol, side, type, timestamp, signature, timeInForce, quantity, quoteOrderQty, price, newClientOrderId, stopPrice, icebergQty, newOrderRespType, recvWindow, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * New Order (TRADE)
     * Send in a new order.   - &#x60;LIMIT_MAKER&#x60; are &#x60;LIMIT&#x60; orders that will be rejected if they would immediately match and trade as a taker. - &#x60;STOP_LOSS&#x60; and &#x60;TAKE_PROFIT&#x60; will execute a &#x60;MARKET&#x60; order when the &#x60;stopPrice&#x60; is reached. - Any &#x60;LIMIT&#x60; or &#x60;LIMIT_MAKER&#x60; type order can be made an iceberg order by sending an &#x60;icebergQty&#x60;. - Any order with an &#x60;icebergQty&#x60; MUST have &#x60;timeInForce&#x60; set to &#x60;GTC&#x60;. - &#x60;MARKET&#x60; orders using &#x60;quantity&#x60; specifies how much a user wants to buy or sell based on the market price. - &#x60;MARKET&#x60; orders using &#x60;quoteOrderQty&#x60; specifies the amount the user wants to spend (when buying) or receive (when selling) of the quote asset; the correct quantity will be determined based on the market liquidity and &#x60;quoteOrderQty&#x60;. - &#x60;MARKET&#x60; orders using &#x60;quoteOrderQty&#x60; will not break &#x60;LOT_SIZE&#x60; filter rules; the order will execute a quantity that will have the notional value as close as possible to &#x60;quoteOrderQty&#x60;. - same &#x60;newClientOrderId&#x60; can be accepted only when the previous one is filled, otherwise the order will be rejected.  Trigger order price rules against market price for both &#x60;MARKET&#x60; and &#x60;LIMIT&#x60; versions:  - Price above market price: STOP_LOSS BUY, TAKE_PROFIT SELL - Price below market price: STOP_LOSS SELL, TAKE_PROFIT BUY   Weight: 1 
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param side SELL or BUY (required)
     * @param type the order type (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param timeInForce order time in force (optional)
     * @param quantity order quantity (optional)
     * @param quoteOrderQty quote quantity (optional)
     * @param price order price (optional)
     * @param newClientOrderId Used to uniquely identify this cancel. Automatically generated by default (optional)
     * @param stopPrice Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders. (optional)
     * @param icebergQty Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order. (optional)
     * @param newOrderRespType Set the response JSON. ACK, RESULT, or FULL; MARKET and LIMIT order types default to FULL, all other orders default to ACK. (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return InlineResponse2007
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2007 apiV3OrderPost(String symbol, String side, String type, Integer timestamp, String signature, String timeInForce, Float quantity, Float quoteOrderQty, Float price, String newClientOrderId, Float stopPrice, Float icebergQty, String newOrderRespType, Integer recvWindow) throws ApiException {
        ApiResponse<InlineResponse2007> resp = apiV3OrderPostWithHttpInfo(symbol, side, type, timestamp, signature, timeInForce, quantity, quoteOrderQty, price, newClientOrderId, stopPrice, icebergQty, newOrderRespType, recvWindow);
        return resp.getData();
    }

    /**
     * New Order (TRADE)
     * Send in a new order.   - &#x60;LIMIT_MAKER&#x60; are &#x60;LIMIT&#x60; orders that will be rejected if they would immediately match and trade as a taker. - &#x60;STOP_LOSS&#x60; and &#x60;TAKE_PROFIT&#x60; will execute a &#x60;MARKET&#x60; order when the &#x60;stopPrice&#x60; is reached. - Any &#x60;LIMIT&#x60; or &#x60;LIMIT_MAKER&#x60; type order can be made an iceberg order by sending an &#x60;icebergQty&#x60;. - Any order with an &#x60;icebergQty&#x60; MUST have &#x60;timeInForce&#x60; set to &#x60;GTC&#x60;. - &#x60;MARKET&#x60; orders using &#x60;quantity&#x60; specifies how much a user wants to buy or sell based on the market price. - &#x60;MARKET&#x60; orders using &#x60;quoteOrderQty&#x60; specifies the amount the user wants to spend (when buying) or receive (when selling) of the quote asset; the correct quantity will be determined based on the market liquidity and &#x60;quoteOrderQty&#x60;. - &#x60;MARKET&#x60; orders using &#x60;quoteOrderQty&#x60; will not break &#x60;LOT_SIZE&#x60; filter rules; the order will execute a quantity that will have the notional value as close as possible to &#x60;quoteOrderQty&#x60;. - same &#x60;newClientOrderId&#x60; can be accepted only when the previous one is filled, otherwise the order will be rejected.  Trigger order price rules against market price for both &#x60;MARKET&#x60; and &#x60;LIMIT&#x60; versions:  - Price above market price: STOP_LOSS BUY, TAKE_PROFIT SELL - Price below market price: STOP_LOSS SELL, TAKE_PROFIT BUY   Weight: 1 
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param side SELL or BUY (required)
     * @param type the order type (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param timeInForce order time in force (optional)
     * @param quantity order quantity (optional)
     * @param quoteOrderQty quote quantity (optional)
     * @param price order price (optional)
     * @param newClientOrderId Used to uniquely identify this cancel. Automatically generated by default (optional)
     * @param stopPrice Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders. (optional)
     * @param icebergQty Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order. (optional)
     * @param newOrderRespType Set the response JSON. ACK, RESULT, or FULL; MARKET and LIMIT order types default to FULL, all other orders default to ACK. (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return ApiResponse&lt;InlineResponse2007&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2007> apiV3OrderPostWithHttpInfo(String symbol, String side, String type, Integer timestamp, String signature, String timeInForce, Float quantity, Float quoteOrderQty, Float price, String newClientOrderId, Float stopPrice, Float icebergQty, String newOrderRespType, Integer recvWindow) throws ApiException {
        com.squareup.okhttp.Call call = apiV3OrderPostValidateBeforeCall(symbol, side, type, timestamp, signature, timeInForce, quantity, quoteOrderQty, price, newClientOrderId, stopPrice, icebergQty, newOrderRespType, recvWindow, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2007>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * New Order (TRADE) (asynchronously)
     * Send in a new order.   - &#x60;LIMIT_MAKER&#x60; are &#x60;LIMIT&#x60; orders that will be rejected if they would immediately match and trade as a taker. - &#x60;STOP_LOSS&#x60; and &#x60;TAKE_PROFIT&#x60; will execute a &#x60;MARKET&#x60; order when the &#x60;stopPrice&#x60; is reached. - Any &#x60;LIMIT&#x60; or &#x60;LIMIT_MAKER&#x60; type order can be made an iceberg order by sending an &#x60;icebergQty&#x60;. - Any order with an &#x60;icebergQty&#x60; MUST have &#x60;timeInForce&#x60; set to &#x60;GTC&#x60;. - &#x60;MARKET&#x60; orders using &#x60;quantity&#x60; specifies how much a user wants to buy or sell based on the market price. - &#x60;MARKET&#x60; orders using &#x60;quoteOrderQty&#x60; specifies the amount the user wants to spend (when buying) or receive (when selling) of the quote asset; the correct quantity will be determined based on the market liquidity and &#x60;quoteOrderQty&#x60;. - &#x60;MARKET&#x60; orders using &#x60;quoteOrderQty&#x60; will not break &#x60;LOT_SIZE&#x60; filter rules; the order will execute a quantity that will have the notional value as close as possible to &#x60;quoteOrderQty&#x60;. - same &#x60;newClientOrderId&#x60; can be accepted only when the previous one is filled, otherwise the order will be rejected.  Trigger order price rules against market price for both &#x60;MARKET&#x60; and &#x60;LIMIT&#x60; versions:  - Price above market price: STOP_LOSS BUY, TAKE_PROFIT SELL - Price below market price: STOP_LOSS SELL, TAKE_PROFIT BUY   Weight: 1 
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param side SELL or BUY (required)
     * @param type the order type (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param timeInForce order time in force (optional)
     * @param quantity order quantity (optional)
     * @param quoteOrderQty quote quantity (optional)
     * @param price order price (optional)
     * @param newClientOrderId Used to uniquely identify this cancel. Automatically generated by default (optional)
     * @param stopPrice Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders. (optional)
     * @param icebergQty Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order. (optional)
     * @param newOrderRespType Set the response JSON. ACK, RESULT, or FULL; MARKET and LIMIT order types default to FULL, all other orders default to ACK. (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV3OrderPostAsync(String symbol, String side, String type, Integer timestamp, String signature, String timeInForce, Float quantity, Float quoteOrderQty, Float price, String newClientOrderId, Float stopPrice, Float icebergQty, String newOrderRespType, Integer recvWindow, final ApiCallback<InlineResponse2007> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV3OrderPostValidateBeforeCall(symbol, side, type, timestamp, signature, timeInForce, quantity, quoteOrderQty, price, newClientOrderId, stopPrice, icebergQty, newOrderRespType, recvWindow, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2007>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV3OrderTestPost
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param side SELL or BUY (required)
     * @param type the order type (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param timeInForce order time in force (optional)
     * @param quantity order quantity (optional)
     * @param quoteOrderQty quote quantity (optional)
     * @param price order price (optional)
     * @param newClientOrderId Used to uniquely identify this cancel. Automatically generated by default (optional)
     * @param stopPrice Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders. (optional)
     * @param icebergQty Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order. (optional)
     * @param newOrderRespType Set the response JSON. ACK, RESULT, or FULL; MARKET and LIMIT order types default to FULL, all other orders default to ACK. (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV3OrderTestPostCall(String symbol, String side, String type, Integer timestamp, String signature, String timeInForce, Float quantity, Float quoteOrderQty, Float price, String newClientOrderId, Float stopPrice, Float icebergQty, String newOrderRespType, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v3/order/test";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (symbol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("symbol", symbol));
        if (side != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("side", side));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (timeInForce != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timeInForce", timeInForce));
        if (quantity != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("quantity", quantity));
        if (quoteOrderQty != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("quoteOrderQty", quoteOrderQty));
        if (price != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("price", price));
        if (newClientOrderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("newClientOrderId", newClientOrderId));
        if (stopPrice != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("stopPrice", stopPrice));
        if (icebergQty != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("icebergQty", icebergQty));
        if (newOrderRespType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("newOrderRespType", newOrderRespType));
        if (recvWindow != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recvWindow", recvWindow));
        if (timestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timestamp", timestamp));
        if (signature != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signature", signature));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV3OrderTestPostValidateBeforeCall(String symbol, String side, String type, Integer timestamp, String signature, String timeInForce, Float quantity, Float quoteOrderQty, Float price, String newClientOrderId, Float stopPrice, Float icebergQty, String newOrderRespType, Integer recvWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling apiV3OrderTestPost(Async)");
        }
        // verify the required parameter 'side' is set
        if (side == null) {
            throw new ApiException("Missing the required parameter 'side' when calling apiV3OrderTestPost(Async)");
        }
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling apiV3OrderTestPost(Async)");
        }
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling apiV3OrderTestPost(Async)");
        }
        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling apiV3OrderTestPost(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV3OrderTestPostCall(symbol, side, type, timestamp, signature, timeInForce, quantity, quoteOrderQty, price, newClientOrderId, stopPrice, icebergQty, newOrderRespType, recvWindow, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Test New Order (TRADE)
     * Test new order creation and signature/recvWindow long.  Creates and validates a new order but does not send it into the matching engine.  Weight: 1
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param side SELL or BUY (required)
     * @param type the order type (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param timeInForce order time in force (optional)
     * @param quantity order quantity (optional)
     * @param quoteOrderQty quote quantity (optional)
     * @param price order price (optional)
     * @param newClientOrderId Used to uniquely identify this cancel. Automatically generated by default (optional)
     * @param stopPrice Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders. (optional)
     * @param icebergQty Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order. (optional)
     * @param newOrderRespType Set the response JSON. ACK, RESULT, or FULL; MARKET and LIMIT order types default to FULL, all other orders default to ACK. (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void apiV3OrderTestPost(String symbol, String side, String type, Integer timestamp, String signature, String timeInForce, Float quantity, Float quoteOrderQty, Float price, String newClientOrderId, Float stopPrice, Float icebergQty, String newOrderRespType, Integer recvWindow) throws ApiException {
        apiV3OrderTestPostWithHttpInfo(symbol, side, type, timestamp, signature, timeInForce, quantity, quoteOrderQty, price, newClientOrderId, stopPrice, icebergQty, newOrderRespType, recvWindow);
    }

    /**
     * Test New Order (TRADE)
     * Test new order creation and signature/recvWindow long.  Creates and validates a new order but does not send it into the matching engine.  Weight: 1
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param side SELL or BUY (required)
     * @param type the order type (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param timeInForce order time in force (optional)
     * @param quantity order quantity (optional)
     * @param quoteOrderQty quote quantity (optional)
     * @param price order price (optional)
     * @param newClientOrderId Used to uniquely identify this cancel. Automatically generated by default (optional)
     * @param stopPrice Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders. (optional)
     * @param icebergQty Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order. (optional)
     * @param newOrderRespType Set the response JSON. ACK, RESULT, or FULL; MARKET and LIMIT order types default to FULL, all other orders default to ACK. (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> apiV3OrderTestPostWithHttpInfo(String symbol, String side, String type, Integer timestamp, String signature, String timeInForce, Float quantity, Float quoteOrderQty, Float price, String newClientOrderId, Float stopPrice, Float icebergQty, String newOrderRespType, Integer recvWindow) throws ApiException {
        com.squareup.okhttp.Call call = apiV3OrderTestPostValidateBeforeCall(symbol, side, type, timestamp, signature, timeInForce, quantity, quoteOrderQty, price, newClientOrderId, stopPrice, icebergQty, newOrderRespType, recvWindow, null, null);
        return apiClient.execute(call);
    }

    /**
     * Test New Order (TRADE) (asynchronously)
     * Test new order creation and signature/recvWindow long.  Creates and validates a new order but does not send it into the matching engine.  Weight: 1
     * @param symbol trading symbol, e.g. BNBUSDT (required)
     * @param side SELL or BUY (required)
     * @param type the order type (required)
     * @param timestamp UTC timestamp (required)
     * @param signature signature (required)
     * @param timeInForce order time in force (optional)
     * @param quantity order quantity (optional)
     * @param quoteOrderQty quote quantity (optional)
     * @param price order price (optional)
     * @param newClientOrderId Used to uniquely identify this cancel. Automatically generated by default (optional)
     * @param stopPrice Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders. (optional)
     * @param icebergQty Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order. (optional)
     * @param newOrderRespType Set the response JSON. ACK, RESULT, or FULL; MARKET and LIMIT order types default to FULL, all other orders default to ACK. (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV3OrderTestPostAsync(String symbol, String side, String type, Integer timestamp, String signature, String timeInForce, Float quantity, Float quoteOrderQty, Float price, String newClientOrderId, Float stopPrice, Float icebergQty, String newOrderRespType, Integer recvWindow, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV3OrderTestPostValidateBeforeCall(symbol, side, type, timestamp, signature, timeInForce, quantity, quoteOrderQty, price, newClientOrderId, stopPrice, icebergQty, newOrderRespType, recvWindow, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
