/*
 * Binance SPOT Public API
 * The swagger file of Binance Public API  API documents:   - [https://github.com/binance-exchange/binance-official-api-docs](https://github.com/binance-exchange/binance-official-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.AccountBalances;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Account
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-11-26T21:41:41.962Z[GMT]")
public class Account {
  @SerializedName("makerCommission")
  private Integer makerCommission = null;

  @SerializedName("takerCommission")
  private Integer takerCommission = null;

  @SerializedName("buyerCommission")
  private Integer buyerCommission = null;

  @SerializedName("sellerCommission")
  private Integer sellerCommission = null;

  @SerializedName("canTrade")
  private Boolean canTrade = null;

  @SerializedName("canWithdraw")
  private Boolean canWithdraw = null;

  @SerializedName("canDeposit")
  private Boolean canDeposit = null;

  @SerializedName("updateTime")
  private Integer updateTime = null;

  @SerializedName("accountType")
  private String accountType = null;

  @SerializedName("balances")
  private List<AccountBalances> balances = null;

  public Account makerCommission(Integer makerCommission) {
    this.makerCommission = makerCommission;
    return this;
  }

   /**
   * Get makerCommission
   * @return makerCommission
  **/
  @Schema(example = "15", description = "")
  public Integer getMakerCommission() {
    return makerCommission;
  }

  public void setMakerCommission(Integer makerCommission) {
    this.makerCommission = makerCommission;
  }

  public Account takerCommission(Integer takerCommission) {
    this.takerCommission = takerCommission;
    return this;
  }

   /**
   * Get takerCommission
   * @return takerCommission
  **/
  @Schema(example = "15", description = "")
  public Integer getTakerCommission() {
    return takerCommission;
  }

  public void setTakerCommission(Integer takerCommission) {
    this.takerCommission = takerCommission;
  }

  public Account buyerCommission(Integer buyerCommission) {
    this.buyerCommission = buyerCommission;
    return this;
  }

   /**
   * Get buyerCommission
   * @return buyerCommission
  **/
  @Schema(example = "0", description = "")
  public Integer getBuyerCommission() {
    return buyerCommission;
  }

  public void setBuyerCommission(Integer buyerCommission) {
    this.buyerCommission = buyerCommission;
  }

  public Account sellerCommission(Integer sellerCommission) {
    this.sellerCommission = sellerCommission;
    return this;
  }

   /**
   * Get sellerCommission
   * @return sellerCommission
  **/
  @Schema(example = "0", description = "")
  public Integer getSellerCommission() {
    return sellerCommission;
  }

  public void setSellerCommission(Integer sellerCommission) {
    this.sellerCommission = sellerCommission;
  }

  public Account canTrade(Boolean canTrade) {
    this.canTrade = canTrade;
    return this;
  }

   /**
   * Get canTrade
   * @return canTrade
  **/
  @Schema(example = "true", description = "")
  public Boolean isCanTrade() {
    return canTrade;
  }

  public void setCanTrade(Boolean canTrade) {
    this.canTrade = canTrade;
  }

  public Account canWithdraw(Boolean canWithdraw) {
    this.canWithdraw = canWithdraw;
    return this;
  }

   /**
   * Get canWithdraw
   * @return canWithdraw
  **/
  @Schema(example = "true", description = "")
  public Boolean isCanWithdraw() {
    return canWithdraw;
  }

  public void setCanWithdraw(Boolean canWithdraw) {
    this.canWithdraw = canWithdraw;
  }

  public Account canDeposit(Boolean canDeposit) {
    this.canDeposit = canDeposit;
    return this;
  }

   /**
   * Get canDeposit
   * @return canDeposit
  **/
  @Schema(example = "true", description = "")
  public Boolean isCanDeposit() {
    return canDeposit;
  }

  public void setCanDeposit(Boolean canDeposit) {
    this.canDeposit = canDeposit;
  }

  public Account updateTime(Integer updateTime) {
    this.updateTime = updateTime;
    return this;
  }

   /**
   * Get updateTime
   * @return updateTime
  **/
  @Schema(example = "123456789", description = "")
  public Integer getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(Integer updateTime) {
    this.updateTime = updateTime;
  }

  public Account accountType(String accountType) {
    this.accountType = accountType;
    return this;
  }

   /**
   * Get accountType
   * @return accountType
  **/
  @Schema(example = "SPOT", description = "")
  public String getAccountType() {
    return accountType;
  }

  public void setAccountType(String accountType) {
    this.accountType = accountType;
  }

  public Account balances(List<AccountBalances> balances) {
    this.balances = balances;
    return this;
  }

  public Account addBalancesItem(AccountBalances balancesItem) {
    if (this.balances == null) {
      this.balances = new ArrayList<AccountBalances>();
    }
    this.balances.add(balancesItem);
    return this;
  }

   /**
   * Get balances
   * @return balances
  **/
  @Schema(description = "")
  public List<AccountBalances> getBalances() {
    return balances;
  }

  public void setBalances(List<AccountBalances> balances) {
    this.balances = balances;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Account account = (Account) o;
    return Objects.equals(this.makerCommission, account.makerCommission) &&
        Objects.equals(this.takerCommission, account.takerCommission) &&
        Objects.equals(this.buyerCommission, account.buyerCommission) &&
        Objects.equals(this.sellerCommission, account.sellerCommission) &&
        Objects.equals(this.canTrade, account.canTrade) &&
        Objects.equals(this.canWithdraw, account.canWithdraw) &&
        Objects.equals(this.canDeposit, account.canDeposit) &&
        Objects.equals(this.updateTime, account.updateTime) &&
        Objects.equals(this.accountType, account.accountType) &&
        Objects.equals(this.balances, account.balances);
  }

  @Override
  public int hashCode() {
    return Objects.hash(makerCommission, takerCommission, buyerCommission, sellerCommission, canTrade, canWithdraw, canDeposit, updateTime, accountType, balances);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Account {\n");
    
    sb.append("    makerCommission: ").append(toIndentedString(makerCommission)).append("\n");
    sb.append("    takerCommission: ").append(toIndentedString(takerCommission)).append("\n");
    sb.append("    buyerCommission: ").append(toIndentedString(buyerCommission)).append("\n");
    sb.append("    sellerCommission: ").append(toIndentedString(sellerCommission)).append("\n");
    sb.append("    canTrade: ").append(toIndentedString(canTrade)).append("\n");
    sb.append("    canWithdraw: ").append(toIndentedString(canWithdraw)).append("\n");
    sb.append("    canDeposit: ").append(toIndentedString(canDeposit)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    accountType: ").append(toIndentedString(accountType)).append("\n");
    sb.append("    balances: ").append(toIndentedString(balances)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
